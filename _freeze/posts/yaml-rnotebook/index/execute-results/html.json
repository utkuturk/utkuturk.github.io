{
  "hash": "6d274d3b0a04f21d804150dd49a867fc",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"how to include r expressions in (quarto) yaml\"\nauthor: Utku Turk\ndate: \"2020-01-23\"\ncategories: [technical, code]\ndescription: using yaml with embedded r expressions for cleaner, reusable quarto configs\nimage: ./yaml.png\nexecute: \n  eval: false\n---\n\nWhen writing R Markdown or Quarto files, I’ve always disliked cluttering them with long file paths, fixed parameters, or small snippets of code. Many of these values are constants or things I don’t plan to change often, sometimes not even across projects.\nSo I started looking for a way to move such information into a separate YAML file and refer to it from within Quarto.\nYou could of course do this with a regular R script and source(), but I found that YAML makes these kinds of project-wide parameters easier to organize and read.\n\n## Embedding R in YAML\n\nWhile digging around, I came across [this helpful StackOverflow post][1], which pointed out that YAML can evaluate R expressions directly if marked with !expr. This means your config file can contain values that are not just static strings, but dynamically computed.\n\nFor example, my `_paper.yaml` file looks like this:\n\n\n```yaml\nexperiments:\n  first: \n    path: !expr 'paste0(\"C:/Users/\", Sys.info()[6], \"/OneDrive/Science/experiments/first\")'\n    nsubject: !expr 'nrow(read.csv(file.path(paste0(\"C:/Users/\", Sys.info()[6], \"/OneDrive/Science/experiments/first\"), \"results.csv\")))'\n  second: !expr 'paste0(\"C:/Users/\", Sys.info()[6], \"/OneDrive/Science/experiments/second\")'\n  third: ...\n\n```\n\n\n\n## Reading it in R \n\n\nTo load the config file, you just need to enable expression evaluation when calling `yaml::read_yaml()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconfig <- yaml::read_yaml('_paper.yaml', eval.expr = TRUE)\n```\n:::\n\n\n\nNow, config behaves like a nested list, and you can access parameters directly. For example:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconfig$experiments$first\nconfig$experiments$first$nsubject\n```\n:::\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\nThis makes it easy to centralize all project-level constants and keep your Quarto documents cleaner.\n\n\n\n\n## Why This Helps\n\n- Cleaner documents: no repeated paths or magic numbers in your `.qmd` files.\n- Reusability: the same YAML file can be shared across multiple projects.\n- Flexibility: values can be static (like participant counts) or computed on the fly (like paths that depend on the username).\n\n\nIt might feel a little fragile, since I am evaluating R code hidden in a config file, but it’s been reliable and I am finding it quite useful. For instance, I sometimes even compute the number of participants automatically from an Ibex CSV and store it in the YAML—then refer to it in my Quarto text.\n\n  [1]: https://stackoverflow.com/questions/64454623/r-read-yaml-reads-a-vector-as-parameter",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
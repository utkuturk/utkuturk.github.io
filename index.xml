<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>utku turk</title>
<link>https://www.utkuturk.com/</link>
<atom:link href="https://www.utkuturk.com/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.8.25</generator>
<lastBuildDate>Wed, 29 Oct 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>misunderstanding Kate Mooney’s talk on nonuniformity of phonology and phonetics</title>
  <dc:creator>Utku Turk</dc:creator>
  <link>https://www.utkuturk.com/posts/misunderstanding-kate/</link>
  <description><![CDATA[ 




<blockquote class="blockquote">
<p>This post is part of a series I’m calling <em>Misunderstandings</em>. The idea is simple: I pick up on talks, papers, or arguments that I admire but also don’t quite buy in the way they’re framed. Sometimes I pose counterexamples, sometimes I just get tangled in the details. The label isn’t meant as dismissive—usually the “misunderstanding” is mine—but I find that pushing on these points is a good way to clarify what’s at stake.</p>
</blockquote>
<p>Kate Mooney’s recent talk at UMass, <em>Segmental phonology, gestural phonetics: Explaining asymmetries between phonological and phonetic operations</em>, was about something deceptively simple: are phonological processes uniform?</p>
<p>The traditional view has been “yes.” If an alternation applies freely, that’s phonology. If it’s tied to a particular morpheme, that’s phonology too, just gated by a diacritic, indexed constraint, or cyclic ranking. The assumption is that the underlying machinery is the same; what differs is timing and scope.</p>
<p>Kate pushed back. She focused on vowel harmony versus vowel co-articulation. Zsiga had already argued these belong to different representational domains—rules vs gestures—but Kate sharpened the contrast. Vowel harmony: categorical, typologically robust, governed by rules. Vowel coarticulation: gradient, gestural blending, and crucially never morphologically restricted. That asymmetry, she argued, is real. If you try to collapse the two into one “uniform phonology,” you erase those typological gaps.</p>
<div class="cell">
<div class="cell-output-display">
<div id="fig-typology-grid" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-typology-grid-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://www.utkuturk.com/posts/misunderstanding-kate/index_files/figure-html/fig-typology-grid-1.png" class="img-fluid figure-img" width="672">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-typology-grid-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: A schematic 2×2 for Kate’s asymmetry. The gradient+restricted quadrant is predicted empty.
</figcaption>
</figure>
</div>
</div>
</div>
<p>It’s a nice move because it comes with clear predictions. You shouldn’t get consonant copy or epenthesis as general phonotactic repairs, only as morphologically restricted alternations. You shouldn’t get morphologically restricted coarticulation. The grid is crisp: categorical + restricted = phonology, gradient + free = phonetics.</p>
<p>I should also say I’m not hostile to this move. In fact, I like the idea that phonology and phonetics are not a uniform system. Substance-free phonology has long made a similar claim: phonology is its own representational domain, not reducible to phonetic substance. I’ve always found that perspective appealing, and Kate’s framework fits that general spirit even though she keeps an arm’s-length stance toward committing to any particular theory.</p>
<p>But I’m suspicious of two-level partitions in general. I feel like in cognitive sciences, whenever there is a hard to explain data, first instinct of many people is to propose a two-level model. Automatic vs controlled processing, System 1 vs System 2 reasoning, parsing vs grammar. Sometimes, this two-level model is needed, especially when it is used to isolate a problem. For example, in the case of I-language idea, it was a powerful tool to carve a theoretical space just to discuss grammar. However, as theorization accumulated, this distinction sometimes used as a pile of “I-actually-dont-have-any-idea-so-it-might-be-processing”.</p>
<p>This pattern is everywhere in cognitive science, and all of these frameworks—including what Kate’s suggesting—share the same basic architecture: one process is fast, automatic, and associative; the other is slow, deliberate, and rule-based. The hope is that human behavior can be explained by sorting phenomena into the right bin. And of course, if you set out to show that sometimes people behave automatically and make mistakes; sometimes they behave deliberately and do not make mistakes, you’ll find confirmation all over the place.</p>
<p>But as Gawronski, Sherman &amp; Trope (2014) point out, dual-process theories only make progress if they meet a demanding set of conditions: they must specify what the two systems actually are (their operating principles), not just when they operate; they must define the boundaries of each system clearly; and they must generate empirical predictions that could, in principle, be falsified. Otherwise, they collapse into post-hoc labeling—System 1 when it’s effortless, System 2 when it’s not. While dual-process frameworks can be falsifiable in principle, they are often <em>practically unfalsifiable</em> because the internal ‘systems’ aren’t anchored to observable input–output relations. Almost any finding can be retrofitted: if an effect looks automatic, it’s assigned to System 1; if it’s resource-dependent, to System 2.</p>
<p>That’s my main worry here. Dual-process models are a tempting last resort. They look tidy, but they often function as theories that can’t really lose—precisely the kind that Popper warned us about. John von Neumann put it bluntly: <em>“With four parameters I can fit an elephant, and with five I can make him wiggle his trunk.”</em> And if you add one more, you can even make him wink. There’s even an R implementation—the <a href="https://www.r-bloggers.com/2011/06/a-winking-pink-elephant/">winking pink elephant</a>—that literally draws and animates an elephant with just a handful of parameters. It’s cute, but it’s also the point: if your model is that flexible, fitting isn’t the same thing as explaining. (The original code is base R/MASS heavy, but you can rewrite it cleanly with <code>ggplot2</code> and <code>dplyr</code>.)</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div id="fig-elephant" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center" alt="Red–pink outline of an elephant drawn by a Fourier series, shown with axes.">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-elephant-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://www.utkuturk.com/posts/misunderstanding-kate/index_files/figure-html/fig-elephant-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:80.0%" alt="Red–pink outline of an elephant drawn by a Fourier series, shown with axes.">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-elephant-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: “With four parameters I can fit an elephant.” The outline is generated by a short Fourier series using complex coefficients.
</figcaption>
</figure>
</div>
</div>
</div>
<p>That’s where Turkish comes in.</p>
<section id="the-turkish-case" class="level2">
<h2 class="anchored" data-anchor-id="the-turkish-case">The Turkish case</h2>
<p>As it is almost a common knowledge, Turkish exhibit multiple vowel harmonies. Harmonization spread from left to right. The easier one is the backness/frontness harmony. For example, the plural morpheme in Turkish can surface as either -lar or -ler, depending on the last vowel in the word that they are attaching. It is argued that plural morpheme is underspecified in its backness characteristics. And, whatever the value of the previous vowel, it spread into the plural morpheme.</p>
<ul>
<li>[yzym] + /-lAr/ -&gt; [yzymler]</li>
<li>[adam] + /-lAr/ -&gt; [adamlar]</li>
</ul>
<p>Another present harmony is Backness and Roundness Harmony. For example, the accusative case can surface as -ɨ, -i, -u, -y in Turkish. Again, the way that it is going to surface is completely dependent on the previous vowel. In this case, the accusative case is underspecified for its roundness and backness, but not underspecified for its height, -I.</p>
<ul>
<li>[adam] + /-I/ -&gt; [adamɨ]</li>
<li>[herif] + /-I/ -&gt; [herifi]</li>
<li>[odun] + /-I/ -&gt; [odunu]</li>
<li>[yzym] + /-I/ -&gt; [yzymy]</li>
</ul>
<p>Turkish does not have any other widely accepted vowel harmony apart from these two. This means that Turkish normally doesn’t have free-standing rounding harmony. Moreover, Turkish vowel harmony is strictly word-internal and left-to-right. Backwards harmony is virtually absent. Between-word harmony is nonexistent.</p>
<p>However, there is an interesting case in which all of these properties are overhauled. Turkish exhibit optional vowel characteristic change in a very specific environment. In fast production of complex noun phrases (an NP and a modifier), speakers often round the initial vowel of the second NP (NP2) if:</p>
<ul>
<li>The last vowel of NP1 is [+round].<br>
</li>
<li>The first vowel of NP2 is [+high, –round].<br>
</li>
<li>The second vowel of NP2 is [+round].<br>
</li>
<li>NP1 ends in a single consonant (clusters tend to block it).</li>
</ul>
<!-- Insert Praat spectrogram/formant track: sequence V[round] – V[high, –round] – V[round], showing F2 lowering in the middle vowel with/without assimilation. -->
<p>Examples (NP1 modifiers in italics):</p>
<ul>
<li><em>bir</em> ikon (one icon) → [bir ikon] but <em>on</em> ikon (ten icons) → [on ykon]</li>
<li><em>iki</em> milyon (two millions) → [iki miljon] but <em>dokuz</em> milyon (nine millions) → [dokuz mylyon]<br>
</li>
<li><em>güzel</em> vizyon (beautiful vision) → [gyzel vizyon] but <em>hoş</em> vizyon (nice vision) → [hoʃ vyzyon]</li>
<li><em>bazı</em> sigorta (some insurance) → [bazɨ sigorta] but <em>tüm</em> sigorta (whole insurance) → [tym sygorta]</li>
<li><em>tek</em> biyoloji (single biology) → [tek bijoloʒi] but <em>vücut</em> biyoloji (body biology) → [vyʒut byjoloʒi]</li>
</ul>
<p>Not everything goes through:</p>
<ul>
<li>üç <em>nilüfer</em> (three lilies) → [ytʃ nilüfer] (no rounding)<br>
</li>
<li>tüm <em>limon</em> (whole lemon) → [tym limon] (no rounding)<br>
</li>
<li>küçük <em>işgücü</em> (small workforce) → [küçük işgücü] (blocked by CC cluster)</li>
</ul>
<!-- Insert table: columns for NP1 type, NP1 final vowel, NP2 initial vowel, NP2 second vowel, outcome (rounding / no rounding). Positive vs negative examples grouped. -->
<p>Loanwords are especially revealing. Epenthetic vowels often participate: <em>hipodrom</em>, <em>sigorta</em>, <em>diskotek</em>. Compounds resist, especially when the boundary is vowel–vowel. Some high-frequency words seem entrenched with disharmony, like <em>dinazor</em> (originally <em>dinozor</em>). There are also asymmetries with labials: sometimes a labial consonant plus a preceding rounded vowel creates the right environment, but not always (<em>nilüfer</em> resists).</p>
<!-- Insert scatterplot or bar chart: proportion of rounding observed by word type—loanwords, compounds, simple NPs, etc. -->
</section>
<section id="why-it-bugs-me" class="level2">
<h2 class="anchored" data-anchor-id="why-it-bugs-me">Why it bugs me</h2>
<p>At first glance, this seems like a good evidence for Kate’s argument.</p>
<ul>
<li>It’s optional: It does not necessarily go through, actually you will hear people do not make the rounding bunch of the times.</li>
<li>It’s gradient: I do not feel like the vowel quality of the rounded one is similar to other round vowels.</li>
<li>It seems to apply semi-automatically in fast speech.</li>
</ul>
<p>However, Kate’s argument relies on the non-collapsibility of the quadrant. An event that looks like this should be co-articulation, and should happen irregardless of morphological or syntactic environment. However, that is not the case for this phenomenon. This specific bidirectional vowel harmony, or stuck vowel, only occurs within the syntactically complex DPs. It does not occur within the same word when the same configuration exist. On the contrary, within the same root, there is an additional push for creating disharmony [see <a href="https://brucehayes.org/251VowelHarmony/Readings/ClementsSezer1982TurkishVowelHarmony.pdf">Clements and Sezer</a>].</p>
<p>In phrases that is not dominated by the same syntactic node, this rounding harmony does not occur. For example, in a sentence like (1), one would expect “ikon” to be pronounced as [ykon] due to the presence of the adverb dün [dyn] prior to it, however, that is not the case. The same resistance is preserved even if we do not have this string in a place close to the topic area, the left-most phrases in Turkish sentences. The same resistance is still preserved if we place these two elements post-verbally, where they are produced in the same breadth, without a possible prosodic break.</p>
<ol type="1">
<li>Dün ikon aldım `I bought an icon yesterday’</li>
<li>Ben Ahmetlerin dükkanından dün ikon aldım. `I bought an icon yesterday from Ahmets’ store’</li>
<li>Ben Ahmetlerin dükkanından aldım dün ikon. `I bought an icon yesterday from Ahmets’ store’</li>
</ol>
<p>This is exactly the quadrant that Kate’s asymmetry says should be empty: co-articulation is supposed to be gradient and unrestricted, phonology is supposed to be categorical and morphological. Turkish gives you a phenomenon that’s both gradient but restricted.</p>
<p>My worry is that the two-level carve—categorical vs gradient, phonology vs phonetics—is just too strong. If phonology is supposed to be categorical and morphologically restricted, and phonetics gradient and unrestricted, what do we do with Turkish? Calling it “just coarticulation” ignores the morphological conditioning. Calling it “phonology” ignores the gradient, variable character.</p>
<p>Maybe I’m misunderstanding Kate’s point—her claim is typological, and she might be perfectly happy calling Turkish an outlier. But it makes me uneasy. Two-level models are good at drawing clean lines, and that’s why they’re attractive. But reality doesn’t always honor the bins we set up for it. One possibility is that coarticulation might be systematically governed prosodical structure. As of now, I categorize this in terms of nouns and their modifiers. It is possible that this is generalized to other heads and their modifiers. Then the question would be the following: is this rounding-harmony conditioned by prosodical structure that is a by-product of “head-modifier” relation or is it conditioned by syntactic locality?</p>
<!-- Insert closing side-by-side Praat spectrograms: one “positive” case (e.g. *ikon* → [ykon]) and one “negative” case (e.g. *nilüfer*), to visually show the subtle but systematic difference. -->


</section>

<script data-collect-dnt="true" async="" src="https://scripts.simpleanalyticscdn.com/latest.js"></script> ]]></description>
  <category>linguistics</category>
  <category>misunderstanding</category>
  <category>sound</category>
  <category>turkish</category>
  <guid>https://www.utkuturk.com/posts/misunderstanding-kate/</guid>
  <pubDate>Wed, 29 Oct 2025 00:00:00 GMT</pubDate>
  <media:content url="https://www.utkuturk.com/posts/misunderstanding-kate/fourier_elephant.png" medium="image" type="image/png" height="72" width="144"/>
</item>
<item>
  <title>Montreal Forced Aligner Workflow for PCIbex Production Experiments</title>
  <dc:creator>Utku Turk</dc:creator>
  <link>https://www.utkuturk.com/posts/mfa/</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>We have our data from PCIbex and our zip files from the server. Let’s assume we have unzipped them and converted them from <code>.webm</code> to <code>.wav</code> files. Now, it’s time to align them using MFA. But before that, we need to prepare our files accordingly. Here are the steps we will follow in this document:</p>
<ul>
<li>Load the PCIbex results</li>
<li>Filter out irrelevant sound files</li>
<li>Move all of our <code>.wav</code> and <code>.TextGrid</code> files to the same directory</li>
<li>Rename our files according to MFA guidelines</li>
<li>Run MFA</li>
<li>Create a dataframe</li>
</ul>
<p>Before we start, let me load my favorite packages. The <code>library()</code> function loads the packages we need, assuming they are already installed. If not, use the <code>install.packages()</code> function to install them. While <code>library()</code> does not require quotes, you should use quotes with <code>install.packages()</code>, e.g., <code>install.packages("tidyverse")</code>. If it asks you to select a mirror from a list, choose a location geographically close to you, such as the UK.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># I have to have tidyverse</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to manipulate string</span></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(readtextgrid) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to read TextGrid files</span></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span></code></pre></div></div>
</div>
</section>
<section id="pcibex-results" class="level1">
<h1>PCIbex Results</h1>
<section id="read-the-results" class="level2">
<h2 class="anchored" data-anchor-id="read-the-results">Read the results</h2>
<p>The main reason we are loading PCIbex results is because sometimes we use the <code>async()</code> function in our PCIbex code. The <code>async()</code> function allows us to send recordings to our server whenever we want without waiting for the end of the experiment. Even though it is extremely helpful in reducing some of the server-PCIbex connection load at the end of the experiment, it also creates some pesky situations. For example, if a participant decides not to complete their experiment, we will still end up with some of their recordings. We do not want participants who were window-shopping, mainly because we are not sure about the quality of their data. Luckily for us, PCIbex only saves the results of participants who complete the entire experiment.</p>
<p>To read the PCIbex results, we are going to use the function provided in the <a href="https://doc.pcibex.net/advanced-tutorial/12_examining-data.html">PCIbex documentation</a>. Scroll down on that page, and you will see the words “Click for Base R Version.” The function is provided there as well. Moreover, please be careful whenever you are copying and pasting functions from this file, or any file, as sometimes PDF or HTML files can include unwanted elements, like a page number.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># User-defined function to read in PCIbex Farm results files</span></span>
<span id="cb2-2">read.pcibex <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(</span>
<span id="cb2-3">    filepath, </span>
<span id="cb2-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">auto.colnames=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, </span>
<span id="cb2-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun.col=</span>\(col,cols){cols[cols<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>col]<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(col,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ibex"</span>,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>);<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(cols)}</span>
<span id="cb2-6">    ) {</span>
<span id="cb2-7">  n.cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count.fields</span>(filepath,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quote=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>),<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb2-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (auto.colnames){</span>
<span id="cb2-9">    cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>()</span>
<span id="cb2-10">    con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file</span>(filepath, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>)</span>
<span id="cb2-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> ( <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span> ) {</span>
<span id="cb2-12">      line <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readLines</span>(con, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">warn=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb2-13">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ( <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(line) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb2-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb2-15">      }</span>
<span id="cb2-16">      m <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">regmatches</span>(line,<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">regexec</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^# (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d+)</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">. (.+)</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.$"</span>,line))[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb2-17">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(m) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) {</span>
<span id="cb2-18">        index <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(m[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb2-19">        value <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> m[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb2-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.function</span>(fun.col)){</span>
<span id="cb2-21">         cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fun.col</span>(value,cols)</span>
<span id="cb2-22">        }</span>
<span id="cb2-23">        cols[index] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> value</span>
<span id="cb2-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (index <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> n.cols){</span>
<span id="cb2-25">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb2-26">        }</span>
<span id="cb2-27">      }</span>
<span id="cb2-28">    }</span>
<span id="cb2-29">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">close</span>(con)</span>
<span id="cb2-30">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read.csv</span>(filepath, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">comment.char=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">header=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col.names=</span>cols))</span>
<span id="cb2-31">  }</span>
<span id="cb2-32">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>{</span>
<span id="cb2-33">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read.csv</span>(filepath, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">comment.char=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">header=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col.names=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n.cols)))</span>
<span id="cb2-34">  }</span>
<span id="cb2-35">}</span></code></pre></div></div>
</div>
<p>So, now what we have to do is load our file. I also want to check my file using the <code>str()</code> function. Please run <code>?str</code> to see what this function does. For any function that you do not understand, you can run the <code>?</code> operator to see the help pages and some examples.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">ibex <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read.pcibex</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/octo-recall-ibex.csv"</span>)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(ibex)</span></code></pre></div></div>
</div>
<p>Now, what I want to do is to get to filenames that are recorded in the PCIbex results. Before doing that, I advise you to go to <a href="https://github.com/addrummond/ibex/blob/master/docs/manual.md">this documentation</a> and read more about PCIbex under the Basic Concepts header.</p>
<table class="caption-top table">
<colgroup>
<col style="width: 15%">
<col style="width: 84%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;"><strong>Column</strong></th>
<th style="text-align: left;"><strong>Information</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">1</td>
<td style="text-align: left;">Time results were received (seconds since Jan 1 1970)</td>
</tr>
<tr class="even">
<td style="text-align: left;">2</td>
<td style="text-align: left;">MD5 hash identifying subject. This is based on the subject’s IP address and various properties of their browser. Together with the value of the first column, this value should uniquely identify each subject.</td>
</tr>
<tr class="odd">
<td style="text-align: left;">3</td>
<td style="text-align: left;">Name of the controller for the entity (e.g.&nbsp;“DashedSentence”)</td>
</tr>
<tr class="even">
<td style="text-align: left;">4</td>
<td style="text-align: left;">Item number</td>
</tr>
<tr class="odd">
<td style="text-align: left;">5</td>
<td style="text-align: left;">Element number</td>
</tr>
<tr class="even">
<td style="text-align: left;">6</td>
<td style="text-align: left;">Label. Label of the newTrial()</td>
</tr>
<tr class="odd">
<td style="text-align: left;">7</td>
<td style="text-align: left;">Latin.Square.Group. The group they are assigned to.</td>
</tr>
<tr class="even">
<td style="text-align: left;">8</td>
<td style="text-align: left;">PennElementType. Name of the specific element, like “Html”, “MediaRecorder”</td>
</tr>
<tr class="odd">
<td style="text-align: left;">9</td>
<td style="text-align: left;">PennElementName. Name we have given to the specific Penn Elements.</td>
</tr>
<tr class="even">
<td style="text-align: left;">10</td>
<td style="text-align: left;">Parameter. This is about what type of element the script is running and saving as a parameter.</td>
</tr>
<tr class="odd">
<td style="text-align: left;">11</td>
<td style="text-align: left;">Value. Value saved for the parameters in column 10.</td>
</tr>
<tr class="even">
<td style="text-align: left;">12</td>
<td style="text-align: left;">EventTime. Time that specific Element is screened or any action taken with that Element (seconds since Jan 1 1970)</td>
</tr>
</tbody>
</table>
</section>
<section id="filter-the-results" class="level2">
<h2 class="anchored" data-anchor-id="filter-the-results">Filter the results</h2>
<p>Since we are dealing with media recordings, I will first filter the file using the <code>PennElementType</code> column and will only select rows with “MediaRecorder” values in that column.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">ibex <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ibex <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(PennElementType <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MediaRecorder"</span>)</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(ibex<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Value)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span></code></pre></div></div>
</div>
<p>After checking my <code>Value</code> column where the file names for <code>MediaRecorder</code> are stored, I realize that this will not be enough given that we still have other unwanted elements like <code>test-recorder.webm</code> file or some practice files. There are multiple ways to get rid of these files, and you have to think about how to get rid of them for your own specific dataframe. For my own data, I will filter my data utilizing the labels I provided in my PCIbex code. They are stored in the <code>Labels</code> column. What I want is to only get the <code>MediaRecorders</code> that are within a trial whose label starts with the word <code>trial</code>.</p>
<p>You may have coded your data differently; you may have used a different word; you may not even have any practice or test-recorders, so maybe you do not even need this second filtering. Check your dataframe using the <code>View()</code> function. I am also using a function called <code>str_detect()</code>, which detects a regular expression pattern, in this case <code>^trial</code>, meaning starting with the word trial. Now, when I check my dataframe, I will only see experimental trials and recordings related to those trials. Just to make sure, I am also using the <code>unique()</code> function so that I do not have repetitions. And, I am assigning my filenames to a list called <code>ibex_files</code>. You can see that any random sample with the <code>sample()</code> function will give filenames related to experimental trials.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">ibex <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ibex <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(Label, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^trial"</span>))</span>
<span id="cb5-2">ibex_files <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ibex<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>()</span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(ibex_files, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div></div>
</div>
</section>
<section id="operators-used-in-this-section" class="level2">
<h2 class="anchored" data-anchor-id="operators-used-in-this-section">Operators used in this section</h2>
<div class="function">
<p><code>?</code></p>
<p>Opens the help page for any function.</p>
<p>example use: <code>?library()</code></p>
</div>
<br>
<div class="function">
<p><code>==</code></p>
<p>Test for equality. <strong>Don’t confuse with a single =, which is an assignment operator (and also always returns TRUE).</strong></p>
<p>example use: ``</p>
</div>
<br>
<div class="function">
<p><code>|&gt;</code></p>
<p><em>(Forward) pipe:</em> Use the expression on the left as a part of the expression on the right.</p>
<ul>
<li>Read <code>x |&gt; fn()</code> as <em>‘use <code>x</code> as the <strong>only</strong> argument of function <code>fn</code>’.</em></li>
<li>Read <code>x |&gt; fn(1, 2)</code> as <em>‘use <code>x</code> as the <strong>first</strong> argument of function <code>fn</code>’.</em></li>
<li>Read <code>x |&gt; fn(1, ., 2)</code> as <em>‘use <code>x</code> as the <strong>second</strong> argument of function <code>fn</code>’.</em></li>
</ul>
<p>example use: ``</p>
</div>
</section>
<section id="our-task-list" class="level2">
<h2 class="anchored" data-anchor-id="our-task-list">Our Task List</h2>
<ul>
<li><del>Load the PCIbex results</del></li>
<li>Filter irrelevant sound files</li>
<li>Move all of our <code>.wav</code> and <code>.TextGrid</code> files to the same directory</li>
<li>Rename our files according to MFA guidelines</li>
<li>Run MFA</li>
<li>Create a dataframe</li>
</ul>
</section>
</section>
<section id="filtering-files-from-the-server" class="level1">
<h1>Filtering Files from the Server</h1>
<p>Now that we have a <em>gold list</em>, we can go ahead and filter our files from the server according to our gold list, based on the results from PCIbex. To do this, first we will create a temporary folder called <code>gold</code>. We will strip every file name of its extension <code>.wav</code> or <code>.TextGrid</code> and check if that name exists in our <em>gold list</em>. If that is the case, we will move the file. To this end, we are going to use something called <a href="https://www.youtube.com/watch?v=5zOTJ0fOllI"><em>for loops</em></a> and <a href="https://www.youtube.com/watch?v=N6E_qqhwr7M"><em>if statements</em></a>. You can click on the hyperlinks to watch more on them. <sup>1</sup></p>
<ul>
<li>First, we need to list all of our files. I have all my <code>.wav</code> and <code>.TextGrid</code> files in the same place, so I just need to list a single directory. You might have them in different places. Check the commented-out part. To only get relevant files, I am using a regular expression saying only choose the ones that end (<code>$</code>) with <code>.wav</code> or (<code>|</code>) <code>.TextGrid</code> using the pattern argument.</li>
<li>Second, we create our <em>gold directory</em> with the <code>dir.create()</code> function.</li>
<li>Third, we iterate over every file in the files list, get its name without its extension using the <code>tools::file_path_sans_ext()</code> function and check whether it exists in our <em>gold list</em> using the <code>%in%</code> operator.</li>
<li>If it is also present in the gold list, we specify where the file exists and assign it to a variable called <code>old_file_path</code>. We also specify where it should be moved and assign it to a variable called <code>new_file_path</code>. We use the <code>file.path()</code> function and <code>dir</code>/<code>gold_dir</code> variables, along with the file <code>f</code> we are iterating over.</li>
<li>Lastly, we move the file using the <code>file.rename()</code> function. Even though the name of the function is <em>rename</em>, it can be used to move files. Every file exists with its pointer, such as <code>~/data/important.R</code>. By changing this pointer, we can change its name, as well as its location to something like <code>~/gold_data/really_important.R</code>. We did not only change the file name from important to really_important. We also changed other parts of this pointer, that is the folder part. If the folder <code>gold_data</code> exists, it will be moved there.</li>
<li>To make sure this for loop works, I also print a message after every file movement using the <code>cat()</code> function.</li>
</ul>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/data"</span></span>
<span id="cb6-2">gold_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/data/gold"</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use these lines if you have sound and transcriptions in different places.</span></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wav_dir &lt;- "~/wav_data"</span></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tg_dir &lt;- "~/tg_data"</span></span>
<span id="cb6-6"></span>
<span id="cb6-7">files <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.wav$|</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.TextGrid"</span>)</span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use these lines if you have sound and transcriptions in different places.</span></span>
<span id="cb6-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tg_files &lt;- list.files(wav_dir, pattern = "\\.wav$|\\.TextGrid")</span></span>
<span id="cb6-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wav_files &lt;- list.files(tg_dir, pattern = "\\.wav$|\\.TextGrid")</span></span>
<span id="cb6-11"></span>
<span id="cb6-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir.create</span>(gold_dir)</span>
<span id="cb6-13"></span>
<span id="cb6-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (f <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> files) {</span>
<span id="cb6-15">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (tools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file_path_sans_ext</span>(f) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> tools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file_path_sans_ext</span>(ibex_files)) {</span>
<span id="cb6-16">    old_file_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(dir, f)</span>
<span id="cb6-17">    new_file_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(gold_dir, f)</span>
<span id="cb6-18">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.rename</span>(old_file_path, new_file_path)</span>
<span id="cb6-19">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Moved "</span>, f, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" to "</span>, new_file_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb6-20">  }</span>
<span id="cb6-21">}</span></code></pre></div></div>
</div>
<p>One important thing to note here is that if you have your <code>.wav</code> and <code>.TextGrid</code> files in different directories, you can either manually move them to a single folder using your file management application. Alternatively, you can run the commands above using <code>wav_dir</code> and <code>tg_dir</code> variables, along with <code>tg_files</code> and <code>wav_files</code> variables. It should look like the following. There are, of course, better ways to solve this problem, and I leave that to your creativity.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">wav_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/wav_data"</span></span>
<span id="cb7-2">tg_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/tg_data"</span></span>
<span id="cb7-3">gold_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/data/gold"</span></span>
<span id="cb7-4"></span>
<span id="cb7-5"></span>
<span id="cb7-6">tg_files <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(wav_dir, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.wav$|</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.TextGrid"</span>)</span>
<span id="cb7-7">wav_files <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(tg_dir, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.wav$|</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.TextGrid"</span>)</span>
<span id="cb7-8"></span>
<span id="cb7-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir.create</span>(gold_dir)</span>
<span id="cb7-10"></span>
<span id="cb7-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (f <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tg_files) {</span>
<span id="cb7-12">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (tools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file_path_sans_ext</span>(f) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> tools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file_path_sans_ext</span>(ibex_files)) {</span>
<span id="cb7-13">    old_file_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(tg_dir, f)</span>
<span id="cb7-14">    new_file_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(gold_dir, f)</span>
<span id="cb7-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.rename</span>(old_file_path, new_file_path)</span>
<span id="cb7-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Moved"</span>, f, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"to"</span>, new_file_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-17">  }</span>
<span id="cb7-18">}</span>
<span id="cb7-19"></span>
<span id="cb7-20"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (f <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> wav_files) {</span>
<span id="cb7-21">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (tools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file_path_sans_ext</span>(f) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> tools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file_path_sans_ext</span>(ibex_files)) {</span>
<span id="cb7-22">    old_file_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(wav_dir, f)</span>
<span id="cb7-23">    new_file_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(gold_dir, f)</span>
<span id="cb7-24">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.rename</span>(old_file_path, new_file_path)</span>
<span id="cb7-25">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Moved"</span>, f, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"to"</span>, new_file_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-26">  }</span>
<span id="cb7-27">}</span></code></pre></div></div>
</div>
<section id="operators-used-in-this-section-1" class="level2">
<h2 class="anchored" data-anchor-id="operators-used-in-this-section-1">Operators used in this section</h2>
<div class="function">
<p><code>%in%</code></p>
<p>Test for membership</p>
<p>example use: ``</p>
</div>
</section>
<section id="our-task-list-1" class="level2">
<h2 class="anchored" data-anchor-id="our-task-list-1">Our Task List</h2>
<ul>
<li><del>Load the PCIbex results</del></li>
<li><del>Filter irrelevant sound files</del></li>
<li><del>Move all of our .wav and .TextGrid files to the same directory</del></li>
<li>Rename our files according to MFA guidelines</li>
<li>Run MFA</li>
<li>Create a dataframe</li>
</ul>
</section>
</section>
<section id="renaming-files" class="level1">
<h1>Renaming Files</h1>
<p>This section is going to be the section you have to be most careful about. If you mess anything up in this section, you will have to delete everything, go back, unzip your files, convert them to <code>.wav</code> from <code>.webm</code>, and do everything in this file again. So, before giving you the for-loop to rename all files, I want to make sure that we go over one of the files and make sure we do it correctly.</p>
<p>The main reason we rename our files is because we want Montreal Forced Aligner to understand that we have multiple speakers in our dataset. If we do not do that, it will treat all files as if they are from a single speaker and probably will be very confused due to inter-speaker variance in speech. Since we have erroneously specified in our PCIbex files to use the <code>subject_id</code> as a suffix rather than a prefix, we have to fix that. If in the future we fix that in our PCIbex script, we do not have to go over this part.</p>
<section id="one-file-example" class="level2">
<h2 class="anchored" data-anchor-id="one-file-example">One-file example</h2>
<p>My files, after unzipping, converting to <code>.wav</code>, and filtering according to the gold list, look like the following. There are some important things to keep in mind here. First of all, now that everything is in our <em>gold directory</em>, we have to use the <code>gold_dir</code> variable to list our files. Secondly, we again need to use the pattern argument to make sure we only select relevant files. The last thing to be aware of in the next code is that I am using indexing with square brackets to refer to the first elements in the list. I will use this element to first ensure that what I am doing is correct.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">gold_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/data/gold"</span></span>
<span id="cb8-2">files <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(gold_dir, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.wav$|</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.TextGrid$"</span>)</span>
<span id="cb8-3">example_file <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> files[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb8-4">example_file</span></code></pre></div></div>
</div>
<section id="get-the-extension-and-the-name" class="level3">
<h3 class="anchored" data-anchor-id="get-the-extension-and-the-name">Get the extension and the name</h3>
<p>Now that we have the name of an example file, we can start by extracting its extension. We will use the function <code>file_ext</code> from the package called <code>tools</code>. Sometimes, we do not want to load an entire package, but we want to access a single function. In those cases, we use the operator <code>::</code>. Additionally, we will use <code>paste0</code> to prefix the extension with a dot, so that we can use it later when we rename our files.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">extension <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file_ext</span>(example_file)</span>
<span id="cb9-2">extension <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>, extension)</span>
<span id="cb9-3">extension</span></code></pre></div></div>
</div>
<p>As for the rest of the name, we will use the <code>file_path_sans_ext()</code> function that we used earlier.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">rest <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file_path_sans_ext</span>(example_file)</span>
<span id="cb10-2">rest</span></code></pre></div></div>
</div>
</section>
<section id="get-the-subject-id" class="level3">
<h3 class="anchored" data-anchor-id="get-the-subject-id">Get the subject id</h3>
<p>Now, the most important part is getting the subject name. If you look at what my <code>rest</code> variable returned, you can see that it consists of the last 4 characters, which are also the last set of characters after the last underscore. There are multiple ways to extract the subject id. I will show you both methods so that you can choose and adapt them for your own data. For the underscore version, we will use the function <code>str_split()</code>, and for the character counting, we will use <code>str_sub()</code>.</p>
<section id="underscore-approach" class="level4">
<h4 class="anchored" data-anchor-id="underscore-approach">Underscore approach</h4>
<p><code>str_split()</code> takes a string and splits it according to the separator you provide. In our case, the separator is the underscore. We are also using an additional argument called <code>simplify</code> to make the resulting elements more user-friendly. Our function now returns a small table with 1 row and 5 columns. To select the values in the 5th column, we use square brackets again, this time with a comma. When you apply this approach to your own data, remember that you may end up with fewer or more than 5 columns depending on your naming convention. Be sure to adjust the column number accordingly. It might also be the case that your subject id is not stored last or that your separators are not underscores but simple “-”. Modify the code according to your specific needs.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using the underscore information</span></span>
<span id="cb11-2">subj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_split</span>(rest, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">simplify =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb11-3">subj</span>
<span id="cb11-4">subj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> subj[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span>
<span id="cb11-5">subj</span></code></pre></div></div>
</div>
<p>Lastly, we have to modify the <code>rest</code> variable so that we do not include the subject id twice. I will use the same approach again. After obtaining the table, I will use the <code>paste()</code> function to concatenate the columns back together with the underscore separator. Adjust the number of columns used in this function and the separator according to your own data needs.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">nosubj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_split</span>(rest, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">simplify =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb12-2">nosubj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(nosubj[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], nosubj[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], nosubj[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], nosubj[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>)</span>
<span id="cb12-3">nosubj</span></code></pre></div></div>
</div>
</section>
<section id="character-approach" class="level4">
<h4 class="anchored" data-anchor-id="character-approach">Character approach</h4>
<p><code>str_sub()</code> allows you to extract a substring using indices. In my case, the subject id is the last four characters. To refer to characters from the end, you can use the minus symbol <code>-</code>. I specify <code>-4</code> in the <code>start</code> argument, which means I want to extract the string starting from the fourth character counting back from the end.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">subj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_sub</span>(rest, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb13-2">subj</span></code></pre></div></div>
</div>
<p>To get the rest of the filename, I specify the starting point as <code>1</code> and the endpoint as <code>-6</code>. Using <code>-5</code> would include the underscore as well.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">nosubj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_sub</span>(rest, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb14-2">nosubj</span></code></pre></div></div>
</div>
</section>
</section>
<section id="put-the-new-name-and-the-path-together" class="level3">
<h3 class="anchored" data-anchor-id="put-the-new-name-and-the-path-together">Put the new name and the path together</h3>
<p>At this point, we have everything we need: (i) the subject id prefix, (ii) the rest of our file name, and (iii) the extension. Now, we need to combine all of this together. We are going to use the <code>paste0()</code> function. Remember, this function is different from <code>paste()</code>. The main difference is that with <code>paste0()</code>, we cannot specify separators; we have to provide everything. This might seem like a disadvantage at first, but it is beneficial for non-pattern cases like this.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">new_name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(subj, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>, nosubj, extension)</span>
<span id="cb15-2">new_name</span></code></pre></div></div>
</div>
<p>We also need to create a new path to rename our file.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">new_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(gold_dir, new_name)</span>
<span id="cb16-2">new_path</span></code></pre></div></div>
</div>
</section>
<section id="rename-the-file" class="level3">
<h3 class="anchored" data-anchor-id="rename-the-file">Rename the file</h3>
<p>We will once again use the <code>file.rename()</code> function. This time, we are only changing the file name and not the path, so the file will remain in its current location. We also need to obtain the full path of our <code>example_file</code>. We can achieve this easily using the <code>file.path</code> function again.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">example_file_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(gold_dir, example_file)</span>
<span id="cb17-2">example_file_path</span></code></pre></div></div>
</div>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.rename</span>(example_file_path, new_path)</span></code></pre></div></div>
</div>
<p>After running this, make sure the naming convention is as we want. Check your folder by searching for the trial. It should look something like <code>subj_rest.wav</code> or <code>subj_rest.TextGrid</code>. In my case, it is `<code>, where</code>dltc` is my subject id or subj.</p>
</section>
</section>
<section id="little-treat-for-you" class="level2">
<h2 class="anchored" data-anchor-id="little-treat-for-you">Little treat for you</h2>
<p>I know that some of your files look like the following: <code>squid_S_jtfr.wav</code>. Here, I will provide you with the code to rename this. Please check this code before using it. First, let’s arbitrarily assign this name to a variable. Remember, in your case, you will obtain this from your <code>files</code> list.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">example_file <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"squid_S_jtfr.wav"</span></span></code></pre></div></div>
</div>
<p>Now, I am going to put all the code together in one chunk, except for moving. Also, be aware that I am using my own <code>gold_dir</code>; please specify yours according to your needs. Additionally, be mindful of your operating system (Windows or Mac). If you are using Windows, your <code>gold_dir</code> variable should look like the second line. I have commented out that part with a hashtag/pound symbol. Uncomment it by deleting the first pound symbol.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">gold_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/data/gold"</span></span>
<span id="cb20-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># gold_dir &lt;- "C:/Users/utkuturk/data/gold" # for windows</span></span>
<span id="cb20-3">extension <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file_ext</span>(example_file)</span>
<span id="cb20-4">extension <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>, extension)</span>
<span id="cb20-5">rest <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file_path_sans_ext</span>(example_file)</span>
<span id="cb20-6">subj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_sub</span>(rest, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb20-7">nosubj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_sub</span>(rest, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb20-8">new_name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(subj, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>, nosubj, extension)</span>
<span id="cb20-9">new_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(gold_dir, new_name)</span>
<span id="cb20-10">new_path</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "~/data/gold/jtfr_squid_S.wav"</code></pre>
</div>
</div>
<p>This would be your original example file path.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">example_file_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(gold_dir, example_file)</span>
<span id="cb22-2">example_file_path</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "~/data/gold/squid_S_jtfr.wav"</code></pre>
</div>
</div>
<p>And this line would handle the renaming from the old <code>example_file_path</code> to the <code>new_path</code>, thereby assigning the new name.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.rename</span>(example_file_path, new_path)</span></code></pre></div></div>
</div>
</section>
<section id="for-loop" class="level2">
<h2 class="anchored" data-anchor-id="for-loop">For loop</h2>
<p>If you have ensured that the code above works correctly for you, you are now ready to implement the for loop. Within the loop, define a variable like <code>f</code> and use it instead of <code>example_file</code>. This way, you will iterate over every file in your list. To verify that it is functioning correctly, I also added a line to print a message each time a file is renamed.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">gold_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/data/gold"</span></span>
<span id="cb25-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># gold_dir &lt;- "C:/Users/utkuturk/data/gold" # for windows</span></span>
<span id="cb25-3">files <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(gold_dir, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.wav$|</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.TextGrid$"</span>)</span>
<span id="cb25-4"></span>
<span id="cb25-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (f <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> files) {</span>
<span id="cb25-6">  extension <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file_ext</span>(f)</span>
<span id="cb25-7">  extension <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>, extension)</span>
<span id="cb25-8">  rest <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file_path_sans_ext</span>(f)</span>
<span id="cb25-9">  subj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_sub</span>(rest, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb25-10">  nosubj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_sub</span>(rest, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb25-11">  new_name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(subj, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>, nosubj, extension)</span>
<span id="cb25-12">  new_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(gold_dir, new_name)</span>
<span id="cb25-13">  file_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(gold_dir, f)</span>
<span id="cb25-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.rename</span>(file_path, new_path)</span>
<span id="cb25-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Renamed"</span>, f, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"to"</span>, new_name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb25-16">}</span></code></pre></div></div>
</div>
</section>
<section id="operators-used-in-this-section-2" class="level2">
<h2 class="anchored" data-anchor-id="operators-used-in-this-section-2">Operators used in this section</h2>
<div class="function">
<p><code>df[selected_rows, indices_columns] or list[selected_element]</code></p>
<p><em>[], Indexing operator:</em> Accesses specific rows and/or columns of a data frame. If it is a list, it only takes a single argument to select an element. Remember in R indices start with 1, unlike python.</p>
<ul>
<li><code>selected_rows</code> A vector of indices or names.</li>
<li><code>selected_columns</code> A vector of indices or names.</li>
<li><code>selected_element</code> A vector of indices or names.</li>
</ul>
<p>example use: <code>files[1]</code></p>
</div>
<p><br></p>
<div class="function">
<p><code>::</code></p>
<p><em>Double colon operator:</em> Accesses functions and other objects from packages. Read <code>x::y</code> as <em>‘function y from package x.’</em></p>
<p>example use: <code>tools::file_ext()</code></p>
</div>
</section>
<section id="our-task-list-2" class="level2">
<h2 class="anchored" data-anchor-id="our-task-list-2">Our Task List</h2>
<ul>
<li><del>Load the PCIbex results</del></li>
<li><del>Filter irrelevant sound files</del></li>
<li><del>Move all of our .wav and .TextGrid files to the same directory</del></li>
<li><del>Rename our files according to MFA guidelines</del></li>
<li>Run MFA</li>
<li>Create a dataset</li>
</ul>
</section>
</section>
<section id="running-the-montreal-forced-aligner" class="level1">
<h1>Running the Montreal Forced Aligner</h1>
<p>Now that we have our files in the format we want, we can place all of our files in the MFA folder and start running the aligner. We can either move our files using the Explorer app and usual copy-paste or we can use the <code>file.rename()</code> function again. Due to the aligner’s limitations, the second option is far better. The main constraint is that MFA starts encountering problems when we feed it more than 2000 files at once. Since I have a lot of data, I will use the following function to divide my files and move them into smaller subfolders. But before that, I will show you how to move files without dividing them into subfolders.</p>
<section id="moving-the-files-to-mfa-directory" class="level2">
<h2 class="anchored" data-anchor-id="moving-the-files-to-mfa-directory">Moving the Files to MFA Directory</h2>
<section id="without-dividing" class="level3">
<h3 class="anchored" data-anchor-id="without-dividing">Without Dividing</h3>
<p>Again, we are going to use the <code>file.rename()</code> and <code>dir.create()</code> functions to create the directory we are moving files to, and of course, to move files.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># gold directory, where all of our files are</span></span>
<span id="cb26-2">gold_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/data/gold"</span></span>
<span id="cb26-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MFA directory</span></span>
<span id="cb26-4">mfa_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/Documents/MFA/mycorpus"</span></span>
<span id="cb26-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir.create</span>(mfa_dir)</span>
<span id="cb26-6"></span>
<span id="cb26-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Files </span></span>
<span id="cb26-8">files <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(gold_dir, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.wav$|</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.TextGrid$"</span>)</span>
<span id="cb26-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (f <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> files) {</span>
<span id="cb26-10">  old_file_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(gold_dir, f)</span>
<span id="cb26-11">  mfa_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(mfa_dir, f)</span>
<span id="cb26-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.rename</span>(old_file_path, mfa_path)</span>
<span id="cb26-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Moved"</span>, f, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"to"</span>, mfa_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb26-14">}</span></code></pre></div></div>
</div>
</section>
<section id="with-dividing-them-into-subfolders" class="level3">
<h3 class="anchored" data-anchor-id="with-dividing-them-into-subfolders">With Dividing them into subfolders</h3>
<p>I will introduce the following function that I use. Here, I will not go into details, but it basically performs the following steps:</p>
<ul>
<li>Creates a subfolder called <code>s1</code> and moves files into it.</li>
<li>Counts up to 2000.</li>
<li>When it surpasses 2000, it creates another subfolder by incrementing the number from <code>s1</code> to <code>s2</code>.</li>
<li>Continues this process until there are no more files.</li>
</ul>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">divide_and_move <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(source, target, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limit=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>) {</span>
<span id="cb27-2">  files <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(source, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.wav$|</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.TextGrid$"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">full.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb27-3">  base_names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(tools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file_path_sans_ext</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">basename</span>(files)))</span>
<span id="cb27-4">  s_index <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb27-5">  f_index <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb27-6">  s_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(target, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"s"</span>, s_index))</span>
<span id="cb27-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir.create</span>(s_path)</span>
<span id="cb27-8">  </span>
<span id="cb27-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (b <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> base_names) {</span>
<span id="cb27-10">    rel_files <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> files[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^"</span>, b, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">basename</span>(files))]</span>
<span id="cb27-11">    </span>
<span id="cb27-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (f_index <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(rel_files) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> limit) {</span>
<span id="cb27-13">      s_index <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> s_index <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb27-14">      s_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(target, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"s"</span>, s_index))</span>
<span id="cb27-15">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir.create</span>(s_path)</span>
<span id="cb27-16">      f_index <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb27-17">    }</span>
<span id="cb27-18">    </span>
<span id="cb27-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (f <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> rel_files) {</span>
<span id="cb27-20">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.rename</span>(f, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(s_path, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">basename</span>(f)))</span>
<span id="cb27-21">    }</span>
<span id="cb27-22">    f_index <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> f_index <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(rel_files)</span>
<span id="cb27-23">  }</span>
<span id="cb27-24">}</span></code></pre></div></div>
</div>
<p>You can use this function by simply providing the source and target folders.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># gold directory, where all of our files are</span></span>
<span id="cb28-2">gold_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/data/gold"</span></span>
<span id="cb28-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MFA directory</span></span>
<span id="cb28-4">mfa_main_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/Documents/MFA"</span></span>
<span id="cb28-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir.create</span>(mfa_dir)</span>
<span id="cb28-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">divide_and_move</span>(gold_dir, mfa_main_dir)</span></code></pre></div></div>
</div>
</section>
</section>
<section id="terminal-codes" class="level2">
<h2 class="anchored" data-anchor-id="terminal-codes">Terminal Codes</h2>
<p>After moving the files either with code or by hand to a specific MFA folder, <code>~/Documents/MFA</code>, we can start running the terminal commands. At this point, I assume you have gone through the <a href="https://montreal-forced-aligner.readthedocs.io/en/latest/installation.html">MFA documentation</a> for installation instructions. I am also assuming that you have used a <code>conda</code> environment. If you haven’t, here are the 3 lines to install MFA.</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Conda Installation in Terminal</strong></pre>
</div>
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb29-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> activate base</span>
<span id="cb29-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> conda-forge mamba</span>
<span id="cb29-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> aligner <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> conda-forge montreal-forced-aligner</span></code></pre></div></div>
</div>
</div>
<p>There are again two ways to do this. One way is to open your Terminal app or use the Terminal tab in the R console below. The other way, which I prefer more, is to execute commands using the R function <code>system()</code>. I will first go over the easier one, which is using the Terminal app or the Terminal tab in R. But the reason I prefer the <code>system()</code> function is that I can loop over multiple folders more easily that way, and I do not have to run my commands again and again.</p>
<section id="using-terminal" class="level3">
<h3 class="anchored" data-anchor-id="using-terminal">Using Terminal</h3>
<p>The first command we want to run is the conda environment code. Following the MFA documentation, I renamed my environment to <code>aligner</code>. So, I start by activating that environment.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb30-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> activate aligner</span></code></pre></div></div>
</div>
<p>After activating the environment, I need to download three models: (i) an acoustic model to recognize phonemes given previous and following acoustic features, (ii) a dictionary to access pretrained phone-word mappings, and (iii) a g2p model to generate sequences of phones based on orthography. For all of these models, we are going to use the <code>english_us_arpa</code> model. You can visit <a href="https://mfa-models.readthedocs.io/en/latest/acoustic/index.html">this website</a> to explore various languages and models.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb31-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mfa</span> model download acoustic english_us_arpa</span>
<span id="cb31-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mfa</span> model download dictionary english_us_arpa</span>
<span id="cb31-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mfa</span> model download g2p english_us_arpa</span></code></pre></div></div>
</div>
<p>After downloading these models, we are going to validate our corpus. There are many customizable parameters for this step. You can check them <a href="https://montreal-forced-aligner.readthedocs.io/en/latest/user_guide/data_validation.html">here</a>. I am going to use my favorite settings here. You can interpret the following command like this: <em>Dear Montreal Forced Aligner (<code>mfa</code>), can you please analyze my files located in <code>~/Documents/MFA/mycorpus</code> and <code>validate</code> them using the <code>english_us_arpa</code> acoustic model and <code>english_us_arpa</code> dictionary? Please also consider that I have multiple speakers, indicated by the first 4 characters (<code>-s 4</code>). It would be great to use multiprocessing (<code>--use_mp</code>) for faster execution. Lastly, please clean up previous and new temporary files (<code>--clean --final_clean</code>).</em></p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb32-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mfa</span> validate <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span> 4 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--use_mp</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--clean</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--final_clean</span> ~/Documents/MFA/mycorpus english_us_arpa english_us_arpa</span></code></pre></div></div>
</div>
<p>This process will take some time. Afterward, you will have some <em>out of vocabulary</em> words found in your TextGrids. You can easily create new pronunciations for them and add them to your model.</p>
<p>The <code>mfa g2p</code> command can take many arguments; here I am using only three. First, the path to the text file that has <em>out of vocabulary</em> words. This file is automatically created in your folder where your files are located. The path may vary depending on your system and folder naming, but the name of the <code>.txt</code> file will be the same. In my case, it is <code>~/Documents/MFA/mycorpus/oovs_found_english_us_arpa.txt</code>. The second argument is the name of the g2p model. As you may recall, we downloaded it earlier, and its name is <code>english_us_arpa</code>. Finally, the third argument is the path to a target <code>.txt</code> file to store new pronunciations. I would like to store them in the same place, so I am using the following path: <code>~/Documents/MFA/mycorpus/g2pped_oovs.txt</code>.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb33-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mfa</span> g2p ~/Documents/MFA/mycorpus/oovs_found_english_us_arpa.txt english_us_arpa ~/Documents/MFA/mycorpus/g2pped_oovs.txt</span></code></pre></div></div>
</div>
<p>After creating the pronunciations, you can add them to your model with <code>mfa model add_words</code>. This command takes the name of the dictionary as an argument (<code>english_us_arpa</code>) and the output of the <code>mfa g2p</code> command, which was a <code>.txt</code> file storing pronunciations: <code>~/Documents/MFA/mycorpus/g2pped_oovs.txt</code>.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb34-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mfa</span> model add_words english_us_arpa ~/Documents/MFA/mycorpus/g2pped_oovs.txt</span></code></pre></div></div>
</div>
<p>The last step is the alignment process. It will align (<code>mfa align</code>) the words and the phones inside our TextGrids stored in <code>~/Documents/MFA/mycorpus</code> using our previously downloaded dictionary (<code>english_us_arpa</code>) and model (<code>english_us_arpa</code>), and store the newly aligned TextGrids in a new folder called <code>~/Documents/MFA/output</code>.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb35-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mfa</span> align ~/Documents/MFA/mycorpus english_us_arpa english_us_arpa ~/Documents/MFA/output</span></code></pre></div></div>
</div>
</section>
<section id="using-r" class="level3">
<h3 class="anchored" data-anchor-id="using-r">Using R</h3>
<p>We can also accomplish all of this in R. One advantage of this approach is that it allows us to iterate over multiple subfolders more easily, which can be useful if we have more than 2000 files. We will use four components:</p>
<ol type="i">
<li><code>system()</code> function to execute terminal commands,</li>
<li><code>paste()</code> function to create multiline templates,</li>
<li><code>%s</code> string placeholder to create template codes,</li>
<li><code>sprintf()</code> function to format our templates.</li>
</ol>
<section id="introduction-to-sprintf-and-s" class="level4">
<h4 class="anchored" data-anchor-id="introduction-to-sprintf-and-s">Introduction to <code>sprintf()</code> and <code>%s</code></h4>
<p>Before going further with MFA codes, let me illustrate with an example. Suppose we have a list of folder names, and we want to create a <code>.txt</code> file in each of these folders. We can use the <code>system()</code> function to perform this action. Below, I define my <code>folder_list</code>, then create paths for my <code>.txt</code> files in each folder, such as <code>~/data1/mydocument.txt</code>. Afterwards, I generate a list of commands to create these files using <code>touch</code>, which is a command-line tool for creating files. Finally, I execute these commands using the <code>system()</code> function.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">folder_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/data1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/data2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/data3"</span>)</span>
<span id="cb36-2"></span>
<span id="cb36-3"></span>
<span id="cb36-4">txt_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(folder_list, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mydocument.txt"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>)</span>
<span id="cb36-5">txt_list</span>
<span id="cb36-6">command_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"touch"</span>, txt_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>)</span>
<span id="cb36-7">command_list</span>
<span id="cb36-8"></span>
<span id="cb36-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (command <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> command_list) {</span>
<span id="cb36-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system</span>(command)</span>
<span id="cb36-11">}</span></code></pre></div></div>
</div>
<p>Technically, we didn’t need to use a for loop; instead, we could have concatenated all these commands with <code>;</code> and run a single system command. Bash can execute multiple commands in a single line when separated by <code>;</code>.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">concatenated_commands <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(command_list[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], </span>
<span id="cb37-2">                               command_list[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], </span>
<span id="cb37-3">                               command_list[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], </span>
<span id="cb37-4">                               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">";"</span>) </span>
<span id="cb37-5"></span>
<span id="cb37-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system</span>(concatenated_commands)</span></code></pre></div></div>
</div>
<p>We could achieve the same without needing a folder list by utilizing the <code>%s</code> placeholder and the <code>sprintf()</code> function.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">command_template <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"touch %s/mydocument.txt"</span></span>
<span id="cb38-2">concatenated_commands <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(command_template, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/data1"</span>), </span>
<span id="cb38-3">                               <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(command_template, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/data2"</span>),</span>
<span id="cb38-4">                               <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(command_template, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/data3"</span>),</span>
<span id="cb38-5">                               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">";"</span>)</span>
<span id="cb38-6"></span>
<span id="cb38-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system</span>(concatenated_commands)</span></code></pre></div></div>
</div>
<p>This approach becomes particularly useful when dealing with multiple placeholders within the same command. For instance, the command template will replace the first <code>%s</code> with the first argument, such as <code>~/data1</code>, and the second <code>%s</code> with the second argument, like <code>mydoc1</code>, when formatted using <code>sprintf()</code>.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">command_template <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"touch %s/%s.txt"</span></span>
<span id="cb39-2">concatenated_commands <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(command_template, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/data1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mydoc1"</span>), </span>
<span id="cb39-3">                               <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(command_template, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/data2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mydoc2"</span>),</span>
<span id="cb39-4">                               <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(command_template, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/data3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mydoc3"</span>),</span>
<span id="cb39-5">                               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">";"</span>)</span>
<span id="cb39-6"></span>
<span id="cb39-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system</span>(concatenated_commands)</span></code></pre></div></div>
</div>
</section>
<section id="running-mfa-in-r" class="level4">
<h4 class="anchored" data-anchor-id="running-mfa-in-r">Running MFA in R</h4>
<p>Next, we’ll consolidate the previous code by concatenating it using <code>paste()</code> and separating commands with <code>;</code>. If needed, we’ll incorporate placeholders. Each line will be assigned to a new variable, and then they’ll be combined into a single command string using <code>paste()</code>. Finally, we’ll execute the command string using <code>system()</code> with the argument <code>intern = TRUE</code> to capture the output into an R variable, which allows for later inspection.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">conda_start <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"conda activate aligner"</span></span>
<span id="cb40-2">get_ac <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mfa model download acoustic english_us_arpa"</span></span>
<span id="cb40-3">get_dic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mfa model download dictionary english_us_arpa"</span></span>
<span id="cb40-4">get_g2p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mfa model download g2p english_us_arpa"</span></span>
<span id="cb40-5"></span>
<span id="cb40-6">mfa_init <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(conda_start, get_ac, get_dic, get_g2p, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">";"</span>)</span>
<span id="cb40-7"></span>
<span id="cb40-8">mfa_init_output <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system</span>(mfa_init, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">intern =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div></div>
</div>
<p>After initializing the model, the next step involves validation. Again, I’ll use the same approach and concatenate the commands together. However, sometimes we may have too many files and need to use subfolders. To accommodate this, I’ll use <code>%s</code> placeholders. The validation command has one placeholder for different subfolders. Similarly, our pronunciation creation for g2p has two placeholders, though they’ll be filled with the same value. Lastly, the <code>add_words</code> command will use a single placeholder. Fortunately, all these folders are the same, so we can reuse the same variable repeatedly.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">conda_start <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"conda activate aligner"</span></span>
<span id="cb41-2"></span>
<span id="cb41-3">validate <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mfa validate -s 4 --use_mp --clean --final_clean ~/Documents/MFA/%s english_us_arpa english_us_arpa"</span></span>
<span id="cb41-4">g2p_words <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mfa g2p ~/Documents/MFA/%s/oovs_found_english_us_arpa.txt english_us_arpa ~/Documents/MFA/%s/g2pped_oovs.txt"</span></span>
<span id="cb41-5">add_words <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mfa model add_words english_us_arpa ~/Documents/MFA/%s/g2pped_oovs.txt"</span></span>
<span id="cb41-6"></span>
<span id="cb41-7">mfa_val <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(conda_start, validate, g2p_words, add_words, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">";"</span>)</span></code></pre></div></div>
</div>
<p>Since this step takes longer and there’s more room for errors, I want to save all my outputs in a list. First, I need to identify which folders exist in my MFA directory. Because my <code>divide_and_move</code> function prefixes every subfolder with <code>s</code>, I’ll use <code>^s</code> to filter for relevant folders.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">output_val <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb42-2"></span>
<span id="cb42-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the base path where folders are located</span></span>
<span id="cb42-4">base_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/Documents/MFA"</span></span>
<span id="cb42-5">folders <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.dirs</span>(base_path, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">recursive =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">full.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb42-6">folders <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> folders[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(folders, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^s"</span>)]</span>
<span id="cb42-7"></span>
<span id="cb42-8">folders</span></code></pre></div></div>
</div>
<p>Now, we can iterate over this list of folders using a for loop. First, we create a temporary script using <code>sprintf()</code> with four placeholders. Next, we execute the current script and save the output in a <code>temp_output</code> variable. Later, we assign this output to specific <code>output_name</code> variables for each folder using <code>paste0()</code> and <code>assign()</code> functions.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (f <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> folders) {</span>
<span id="cb43-2">  cur_mfa_val <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(mfa_val, f, f, f, f)</span>
<span id="cb43-3">  </span>
<span id="cb43-4">  temp_output <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system</span>(cur_mfa_val, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">intern =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb43-5">  </span>
<span id="cb43-6">  output_name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output_val_"</span>, f)</span>
<span id="cb43-7">  </span>
<span id="cb43-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assign</span>(output_name, temp_output, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> .GlobalEnv)</span>
<span id="cb43-9">}</span></code></pre></div></div>
</div>
<p>Now you can check the outputs by calling specific variables like <code>output_val_s1</code> or <code>output_val_s2</code>. After this step, the only task remaining is to run the aligner. We will create a template again, iterate over folders, and assign outputs to their respective names for verification. Meanwhile, the bash code will execute in the background. This time, our placeholders will refer to different inputs and an output folder. Fortunately, we can use the same output folder for every subfolder, so instead of using two placeholders, we’ll use a single <code>%s</code> placeholder.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">conda_start <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"conda activate aligner"</span></span>
<span id="cb44-2"></span>
<span id="cb44-3">align <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mfa align ~/Documents/MFA/%s english_us_arpa english_us_arpa ~/Documents/MFA/output"</span></span>
<span id="cb44-4"></span>
<span id="cb44-5">mfa_align <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(conda_start, align, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">";"</span>)</span>
<span id="cb44-6"></span>
<span id="cb44-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (f <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> folders) {</span>
<span id="cb44-8">  cur_mfa_align <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(mfa_align, f)</span>
<span id="cb44-9">  temp_output <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system</span>(cur_mfa_align, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">intern=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb44-10">  output_name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output_align_"</span>, f)</span>
<span id="cb44-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assign</span>(output_name, temp_output, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> .GlobalEnv)</span>
<span id="cb44-12">}</span></code></pre></div></div>
</div>
<p>This for loop completes the MFA alignment. There is one final task remaining: creating a dataframe for further data analysis.</p>
</section>
</section>
</section>
<section id="our-task-list-3" class="level2">
<h2 class="anchored" data-anchor-id="our-task-list-3">Our Task List</h2>
<ul>
<li><del>Load the PCIbex results</del></li>
<li><del>Filter irrelevant sound files</del></li>
<li><del>Move all of our .wav and .TextGrid files to the same directory</del></li>
<li><del>Rename our files according to MFA guidelines</del></li>
<li><del>Run MFA</del></li>
<li>Create a dataframe</li>
</ul>
</section>
</section>
<section id="dataframe-creation" class="level1">
<h1>Dataframe Creation</h1>
<p>Now that we have all our <code>.TextGrid</code> files aligned, we can create a dataframe for subsequent statistical analyses using the <code>readtextgrid</code> package. First, I’ll demonstrate the process for a single file. Later, I’ll explain how to extend this to an entire directory. Let’s begin by specifying our directory and listing the files. You can view the first few elements of a list or dataframe using the <code>head()</code> function.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the directory and list files</span></span>
<span id="cb45-2">tg_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/Documents/MFA/output"</span></span>
<span id="cb45-3">file_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> tg_dir, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.TextGrid$"</span>)</span>
<span id="cb45-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(file_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div></div>
</div>
<section id="one-file-example-1" class="level2">
<h2 class="anchored" data-anchor-id="one-file-example-1">One-file example</h2>
<p>Again, let’s work with an example file from our list, starting with the first file <code>[1]</code>. First, we’ll retrieve its full file path. Then, we’ll use the <code>read_textgrid()</code> function to create a dataframe for this single file. I’ll print the structure of the dataframe to give you a clearer view of its contents.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">example_file <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> file_list[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb46-2">file_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(tg_dir, example_file)</span>
<span id="cb46-3">example_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> readtextgrid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_textgrid</span>(file_path)</span>
<span id="cb46-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(example_df)</span></code></pre></div></div>
</div>
<p>In this project, which involves aligning words, we are interested in only a couple of these columns. Specifically, we focus on the file identifier (<code>file</code>) to determine the trial from which the data originates, the tier name (<code>tier_name</code>) to differentiate between word and phone tiers, the start (<code>xmin</code>) and end (<code>xmax</code>) of each interval, and finally, the <code>text</code>. Additionally, I am not interested in retaining the file extension in the <code>file</code> identifier. Therefore, we will first filter to include only annotated words, then select the important columns using <code>select()</code>, remove the <code>.TextGrid</code> extension, and concatenate the words so that we can see the full response for each trial.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1">example_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> example_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb47-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter annotated "words" tier</span></span>
<span id="cb47-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(tier_name <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"words"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> text <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb47-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select relevant columns</span></span>
<span id="cb47-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(file, xmin, xmax, text, annotation_num) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb47-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove .TextGrid and put the response together</span></span>
<span id="cb47-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_remove</span>(file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.TextGrid$"</span>),</span>
<span id="cb47-8">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">response =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(text, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>))</span>
<span id="cb47-9"></span>
<span id="cb47-10">example_df</span></code></pre></div></div>
</div>
<p>We also need some information about the trial. Luckily, all of our information is provided in our file name. So, I am going to parse that name to create a dataframe with more information. I am using a set of function that all start with <code>separate_wider_</code>.</p>
<ul>
<li>The <code>delim</code> version uses a deliminator to split a row of a dataframe.</li>
<li>The <code>regex</code> version uses regular expressions to split the data.</li>
<li>Finally, the <code>position</code> version uses the number of characters to split the data.</li>
</ul>
<p>I am doing all of this because of how I initially coded my experiment output in my PCIbex script. You may need to change this code to process your own data.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">example_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> example_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb48-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split the `file` column into 5 different columns.</span></span>
<span id="cb48-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">separate_wider_delim</span>(file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"subj"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"exp"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"headVerb"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NumNum"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sem_type"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols_remove =</span> F) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb48-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split the headVerb column from the "U" character</span></span>
<span id="cb48-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">separate_wider_regex</span>(headVerb, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">head =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".*"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"U"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">verb_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".*"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb48-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add the "U" character back to "Unacc" and "Unerg"s</span></span>
<span id="cb48-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">verb_type =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"U"</span>, verb_type)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb48-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split the head and distractor numbers.</span></span>
<span id="cb48-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">separate_wider_position</span>(NumNum, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">head_num =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dist_num =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb48-10"></span>
<span id="cb48-11">example_df</span></code></pre></div></div>
</div>
</section>
<section id="another-treat-for-you" class="level2">
<h2 class="anchored" data-anchor-id="another-treat-for-you">Another Treat for you</h2>
<p>Let’s see what you will need to do. You will find your file in the <code>MFA/output</code> folder as well, and your file will look like <code>jtfr_squid_S.TextGrid</code>. Let’s arbitrarily put them here. Remember, you will have to use the <code>file.list()</code> function as well. You will not need to change anything in the first part where we work on the TextGrid. The necessary changes will need to be done in the parsing procedure. Instead of using the entire <code>regex</code> or <code>position</code> methods, you will just need to use the <code>delim</code> version of the function.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the directory and list files</span></span>
<span id="cb49-2">tg_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/Documents/MFA/output"</span></span>
<span id="cb49-3">your_file <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jtfr_squid_S.TextGrid"</span></span>
<span id="cb49-4"></span>
<span id="cb49-5">file_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(tg_dir, your_file)</span>
<span id="cb49-6"></span>
<span id="cb49-7"></span>
<span id="cb49-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">### LETS SAY YOU RAN read_textgrid function.</span></span>
<span id="cb49-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">### I commented out this part, because I do not have your data.</span></span>
<span id="cb49-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">### Final dataframe will be slightly different here, because I do not have the textgrid data here.</span></span>
<span id="cb49-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># your_df &lt;- readtextgrid::read_textgrid(path = file_path) |&gt;</span></span>
<span id="cb49-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     filter(tier_name == "words" &amp; text != "") |&gt;</span></span>
<span id="cb49-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     select(file, xmin, xmax, text, annotation_num) |&gt;</span></span>
<span id="cb49-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     mutate(file = str_remove(file, "\\.TextGrid$"),</span></span>
<span id="cb49-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#            response = paste(text, collapse = " "))</span></span>
<span id="cb49-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   </span></span>
<span id="cb49-17"></span>
<span id="cb49-18">your_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> your_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb49-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">separate_wider_delim</span>(file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"subj"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"head"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"condition"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols_remove =</span> F) </span>
<span id="cb49-20"></span>
<span id="cb49-21">your_df</span></code></pre></div></div>
</div>
<div class="cell">
<div class="cell-output-display">
<table class="caption-top table table-sm table-striped small">
<colgroup>
<col style="width: 5%">
<col style="width: 6%">
<col style="width: 10%">
<col style="width: 13%">
<col style="width: 5%">
<col style="width: 5%">
<col style="width: 7%">
<col style="width: 15%">
<col style="width: 29%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">subj</th>
<th style="text-align: left;">head</th>
<th style="text-align: left;">condition</th>
<th style="text-align: left;">file</th>
<th style="text-align: left;">xmin</th>
<th style="text-align: left;">xmax</th>
<th style="text-align: left;">text</th>
<th style="text-align: right;">annotation_num</th>
<th style="text-align: left;">response</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">jtfr</td>
<td style="text-align: left;">squid</td>
<td style="text-align: left;">S</td>
<td style="text-align: left;">jtfr_squid_S</td>
<td style="text-align: left;"></td>
<td style="text-align: left;"></td>
<td style="text-align: left;">squid</td>
<td style="text-align: right;">1</td>
<td style="text-align: left;">squid jumped over the fence</td>
</tr>
<tr class="even">
<td style="text-align: left;">jtfr</td>
<td style="text-align: left;">squid</td>
<td style="text-align: left;">S</td>
<td style="text-align: left;">jtfr_squid_S</td>
<td style="text-align: left;"></td>
<td style="text-align: left;"></td>
<td style="text-align: left;">jumped</td>
<td style="text-align: right;">2</td>
<td style="text-align: left;">squid jumped over the fence</td>
</tr>
<tr class="odd">
<td style="text-align: left;">jtfr</td>
<td style="text-align: left;">squid</td>
<td style="text-align: left;">S</td>
<td style="text-align: left;">jtfr_squid_S</td>
<td style="text-align: left;"></td>
<td style="text-align: left;"></td>
<td style="text-align: left;">over</td>
<td style="text-align: right;">3</td>
<td style="text-align: left;">squid jumped over the fence</td>
</tr>
<tr class="even">
<td style="text-align: left;">jtfr</td>
<td style="text-align: left;">squid</td>
<td style="text-align: left;">S</td>
<td style="text-align: left;">jtfr_squid_S</td>
<td style="text-align: left;"></td>
<td style="text-align: left;"></td>
<td style="text-align: left;">the</td>
<td style="text-align: right;">4</td>
<td style="text-align: left;">squid jumped over the fence</td>
</tr>
<tr class="odd">
<td style="text-align: left;">jtfr</td>
<td style="text-align: left;">squid</td>
<td style="text-align: left;">S</td>
<td style="text-align: left;">jtfr_squid_S</td>
<td style="text-align: left;"></td>
<td style="text-align: left;"></td>
<td style="text-align: left;">fence</td>
<td style="text-align: right;">5</td>
<td style="text-align: left;">squid jumped over the fence</td>
</tr>
</tbody>
</table>
</div>
</div>
</section>
<section id="for-loop-1" class="level2">
<h2 class="anchored" data-anchor-id="for-loop-1">For-loop</h2>
<p>Now, we need to apply this process to all files in our output directory. To simplify this, I’ll start by creating a function for processing each file individually and then apply it to all files. The function takes a file name and its directory as inputs and returns a dataframe. Before creating each dataframe, it prints “Reading the file.” to indicate progress.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">process_textgrid <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(file, directory) {</span>
<span id="cb50-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Reading"</span>, file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb50-3">  file_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(directory, file)</span>
<span id="cb50-4">  df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> readtextgrid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_textgrid</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> file_path) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb50-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(tier_name <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"words"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> text <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb50-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(file, xmin, xmax, text, annotation_num) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb50-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_remove</span>(file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.TextGrid$"</span>),</span>
<span id="cb50-8">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">response =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(text, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>))</span>
<span id="cb50-9">  </span>
<span id="cb50-10">  df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb50-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">separate_wider_delim</span>(file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"subj"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"exp"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"headVerb"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NumNum"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sem_type"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols_remove =</span> F) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb50-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">separate_wider_regex</span>(headVerb, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">head =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".*"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"U"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">verb_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".*"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb50-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">verb_type =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"U"</span>, verb_type)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb50-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">separate_wider_position</span>(NumNum, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">head_num =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dist_num =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb50-15">  </span>
<span id="cb50-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(df)</span>
<span id="cb50-17">}</span></code></pre></div></div>
</div>
<p>This is essentially the same process as before, but encapsulated within a function for easier application. Here’s an example of how I’m redefining my directory and file list:</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the directory and list files</span></span>
<span id="cb51-2">tg_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/Documents/MFA/output"</span></span>
<span id="cb51-3">file_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> tg_dir, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.TextGrid$"</span>)</span>
<span id="cb51-4">example_file <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> file_list[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb51-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">process_textgrid</span>(example_file, tg_dir)</span></code></pre></div></div>
</div>
<p>Your version will look like this.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1">process_textgrid <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(file, directory) {</span>
<span id="cb52-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Reading"</span>, file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb52-3">  file_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(directory, file)</span>
<span id="cb52-4">  df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> readtextgrid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_textgrid</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> file_path) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb52-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(tier_name <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"words"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> text <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb52-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(file, xmin, xmax, text, annotation_num) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb52-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_remove</span>(file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.TextGrid$"</span>),</span>
<span id="cb52-8">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">response =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(text, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>))</span>
<span id="cb52-9">  </span>
<span id="cb52-10">  df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb52-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">separate_wider_delim</span>(file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"subj"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"head"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"condition"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols_remove =</span> F) </span>
<span id="cb52-12">  </span>
<span id="cb52-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(df)</span>
<span id="cb52-14">}</span></code></pre></div></div>
</div>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the directory and list files</span></span>
<span id="cb53-2">tg_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/Documents/MFA/output"</span></span>
<span id="cb53-3">file_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> tg_dir, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.TextGrid$"</span>)</span>
<span id="cb53-4">example_file <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> file_list[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb53-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">process_textgrid</span>(example_file, tg_dir)</span></code></pre></div></div>
</div>
<p>Now, we need to integrate this function into our for-loop. Instead of using a single file like <code>file_list[1]</code>, we will apply it to an entire directory. Unlike previous for loops, we will use the <code>map</code> function from the <code>purrr</code> package. It is faster and easier to use in cases like this. <code>map()</code> will return all of our dataframes embedded in a list. After using <code>map()</code>, we need to combine all these smaller dataframes into a larger one using <code>bind_rows</code>.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the directory and list files</span></span>
<span id="cb54-2">tg_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/Documents/MFA/output"</span></span>
<span id="cb54-3">file_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> tg_dir, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.TextGrid$"</span>)</span>
<span id="cb54-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run our function, I am using mine, you should use your own.</span></span>
<span id="cb54-5">process_textgrid <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(file, directory) {</span>
<span id="cb54-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Reading"</span>, file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb54-7">  file_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(directory, file)</span>
<span id="cb54-8">  df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> readtextgrid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_textgrid</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> file_path) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb54-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(tier_name <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"words"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> text <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb54-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(file, xmin, xmax, text, annotation_num) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb54-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_remove</span>(file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.TextGrid$"</span>),</span>
<span id="cb54-12">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">response =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(text, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>))</span>
<span id="cb54-13">  </span>
<span id="cb54-14">  df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb54-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">separate_wider_delim</span>(file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"subj"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"exp"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"headVerb"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NumNum"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sem_type"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols_remove =</span> F) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb54-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">separate_wider_regex</span>(headVerb, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">head =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".*"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"U"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">verb_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".*"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb54-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">verb_type =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"U"</span>, verb_type)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb54-18">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">separate_wider_position</span>(NumNum, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">head_num =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dist_num =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb54-19">  </span>
<span id="cb54-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(df)</span>
<span id="cb54-21">}</span>
<span id="cb54-22"></span>
<span id="cb54-23">dfs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(file_list, process_textgrid, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">directory =</span> tg_dir)</span>
<span id="cb54-24"></span>
<span id="cb54-25">final_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(dfs)</span></code></pre></div></div>
</div>
<p>This completes our MFA Aligning work. We have successfully completed every task on our list, aligned our data, and created a dataframe for analysis. You can check the structure of our final dataframe, the number of rows, and the count of unique trials.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(final_df)</span>
<span id="cb55-2"></span>
<span id="cb55-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(final_df)</span>
<span id="cb55-4"></span>
<span id="cb55-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(final_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>file))</span></code></pre></div></div>
</div>
</section>
</section>
<section id="an-example-descriptive-summary" class="level1">
<h1>An Example Descriptive Summary</h1>
<p>Let me also show a small example of descriptive statistics using basic functions. One thing we might want to do is check whether there is a difference between conditions in people’s time to start uttering the sentence. Let’s assume people are still thinking about the sentence when they utter the first determiner “<em>the</em>,” since it is kind of automatic in English and all of our sentences start with this determiner anyway. I am going to filter my dataframe using the <code>text</code> column. Additionally, I want to ensure it is the first occurrence of “<em>the</em>” and not any other “<em>the</em>” in the sentences, so I will use the <code>annotation_num</code> column in my filtering.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1">first_thes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> final_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(text <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"the"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> annotation_num <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div></div>
</div>
<p>Then, what I am going to do is summarize my dataframe. I will group my dataframe by columns <code>verb_type</code> and <code>sem_type</code> since my experiment had 2 different verb types (unergative, unaccusative) and 2 different types of semantic distractors (related, unrelated). Then, I am going to use the <code>summarize()</code> function to get the mean, standard error, and credible interval for each condition. Since we are assuming people are still planning sentences while they utter the first determiner, I am going to summarize my data using the offset of the <em>the</em> (<code>xmax</code>). Before doing this, I am going to convert <code>xmax</code> from seconds to milliseconds.</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1">first_thes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb57-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmax =</span> xmax<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb57-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(verb_type, sem_type) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb57-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise_each</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">funs</span>(mean, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(.)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>()), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ci=</span>se<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.96</span>), xmax)</span></code></pre></div></div>
</div>
<p>From this point on, I leave the modeling and plotting of the data for another guide.</p>


</section>


<script>/* Simple Analytics - Privacy friendly analytics (docs.simpleanalytics.com/script; 2023-05-03; f270; v11) */

!function(l,t,e,n,p){try{var h=undefined,f=!0,d=!1,r="true",a="https:",m="pageview",u="event",i="error",o=l.console,c="doNotTrack",g=l.navigator,s=l.location,v=s.host,y=l.document,_=g.userAgent,w="Not sending request ",b=w+"when ",E=d,O=encodeURIComponent,x=decodeURIComponent,S=JSON.stringify,M=l.addEventListener,k="https://queue."+e,q=y.documentElement||{},A="language",$="Height",j="scroll",D=g.userAgentData,C=j+$,R="offset"+$,H="client"+$,P="pagehide",T="platform",U="platformVersion",I="https://docs.simpleanalytics.com",V=0,B=/(bot|spider|crawl)/i.test(_)&&!/(cubot)/i.test(_),N=l.screen,z=y.currentScript||y.querySelector('script[src*="'+e+'"]');p=function(){var t=[].slice.call(arguments);return t.unshift("Simple Analytics:"),Function.prototype.apply.call(o.warn,o,t)};var F=function(t,e){p("Error in your "+t+" function:",e)},W=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},G=function(t){return t.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")},J=function(t,e){return t&&t.getAttribute("data-"+e)},L=function(t){return Array.isArray(t)?t:"string"==typeof t&&t.length?t.split(/, ?/):[]},Y=function(t){return t&&t.constructor===Object},Z=function(){for(var t={},e=arguments,n=0;n<e.length;n++){var r=e[n];if(Y(r))for(var a in r)W(r,a)&&(t[a]=r[a])}return t},K=l.sa_settings,Q=K||Object.keys(t).length;t=Z(t,K),Q&&p("Settings",t);var X=L(t.ignoreMetrics||J(z,"ignore-metrics")),tt=function(e){return 0===X.filter(function(t){return new RegExp("^"+e).test(t)}).length},et=Date.now,nt=function(){var e=l.crypto||l.msCrypto,t=[1e7]+-1e3+-4e3+-8e3+-1e11,n=/[018]/g;try{return t.replace(n,function(t){return(t^e.getRandomValues(new Uint8Array(1))[0]&15>>t/4).toString(16)})}catch(r){return t.replace(n,function(t){var e=16*Math.random()|0;return(t<2?e:3&e|8).toString(16)})}},rt=function(t){return"function"==typeof t},at="namespace",it=t[at]||J(z,at)||"sa",ot=l[it+"_metadata"],ct=function(t,e){Y(ot)&&(t=Z(t,ot));var n=l[Mt];if(!rt(n))return t;try{return Z(t,n.call(l,Z(t,e)))}catch(r){F("metadata",r)}},st=t.strictUtm||J(z,"strict-utm")==r,ut=function(a){return s.search.slice(1).split("&").filter(function(t){var e=a||!tt("ut"),n=Ot.map(G).join("|"),r=e?"^("+n+")=":"^((utm_)"+(st?"":"?")+"(source|medium|content|term|campaign)"+(st?"":"|ref")+"|"+n+")=";return e&&!Ot.length?d:new RegExp(r).test(t)}).join("&")||h},lt=it+"_loaded";if(l[lt]==f)return p(w+"twice");l.sa_event_loaded=f,l[lt]=f;var pt=function(e,t,n){e=n?e:Z(At,Dt,e),g.brave&&!n&&(e.brave=f),g._duckduckgoloader_&&!n&&(e.duck=f);var r=new Image;t&&(r.onerror=t,r.onload=t),r.src=k+"/simple.gif?"+Object.keys(e).filter(function(t){return e[t]!=h}).map(function(t){return O(t)+"="+O(e[t])}).join("&")+"&time="+Date.now()},ht=t.hostname||J(z,"hostname"),ft=ht||v,dt={version:"cdn_latest_11",hostname:ft};n=function(t){t=t.stack?t+" "+t.stack:t,p(t),pt(Z(dt,{type:i,error:t,path:s.pathname}),h,f)},M(i,function(t){t.filename&&-1<t.filename.indexOf(e)&&n(t.message)},d);var mt,gt=et(),vt=0,yt=t.mode||J(z,"mode"),_t=!!(ee=t.collectDnt)===ee?t.collectDnt:J(z,"ignore-dnt")==r||J(z,"skip-dnt")==r||J(z,"collect-dnt")==r,wt=!("false"==J(z,"auto-collect")||t.autoCollect===d),bt=t.saGlobal||J(z,"sa-global")||it+"_"+u,Et=L(t.ignorePages||J(z,"ignore-pages")),Ot=L(t.allowParams||J(z,"allow-params")),xt=L(t.nonUniqueHostnames||J(z,"non-unique-hostnames")),St=t.pathOverwriter||J(z,"path-overwriter"),Mt=t.metadataCollector||J(z,"metadata-collector");try{mt=tt("c")?Intl.DateTimeFormat().resolvedOptions().timeZone:h}catch(ne){p(ne)}var kt=g.webdriver||l.__nightmare||l.callPhantom||l._phantom||l.phantom||l.__polypane||l._bot||B||Math.random()==Math.random(),qt=tt("t")||tt("scro");kt&&(dt.bot=f);var At=Z(dt,{ua:tt("us")?_:h,https:s.protocol==a,timezone:mt,page_id:qt?nt():h,session_id:tt("se")?nt():h});if(At.sri=d,D&&(At.mobile=D.mobile,At.brands=S(D.brands)),y.doctype||p("Add DOCTYPE html for accurate dimensions"),ft!==v&&(At.hostname_original=v),!_t&&c in g&&"1"==g[c])return p(b+c+" is enabled. See "+I+"/dnt");-1!=v.indexOf(".")&&!/^[0-9.:]+$/.test(v)||ht||p("Set hostname on "+v+". See "+I+"/overwrite-domain-name");var $t,jt,Dt={},Ct=(y.referrer||"").replace(v,ft).replace(/^https?:\/\/((m|l|w{2,3}([0-9]+)?)\.)?([^?#]+)(.*)$/,"$4").replace(/^([^/]+)$/,"$1")||h,Rt=0,Ht=function(t,e){var n;qt&&(n=Z(dt,{type:"append",original_id:e?t:At.page_id}),tt("t")&&(n.duration=Math.round((et()-gt-Rt)/1e3)),Rt=0,gt=et(),tt("scro")&&(n.scrolled=Math.max(0,vt,Tt())),e||!g.sendBeacon?pt(n,h,f):g.sendBeacon(k+"/append",S(n)))};M("visibilitychange",function(){y.hidden?("on"+P in l||Ht(),jt=et()):Rt+=et()-jt},d),M(P,Ht,d);var Pt=y.body||{},Tt=function(){try{var t=q[H]||0,e=Math.max(Pt[C]||0,Pt[R]||0,q[H]||0,q[C]||0,q[R]||0);return Math.min(100,5*Math.round(100*((q.scrollTop||0)+t)/e/5))}catch(ne){return p(ne),0}};M("load",function(){vt=Tt(),M(j,function(){vt<Tt()&&(vt=Tt())},d)});var Ut,It,Vt,Bt=function(t){var e="";try{e=t||x(s.pathname)}catch(ne){p(ne)}var n=l[St];if(rt(n))try{e=n.call(l,{path:e})||e}catch(ne){F("path",ne)}if(!function(t){for(var e in Et){var n=Et[e];if(n){var r="/"==n[0]?n:"/"+n;if(r===t||new RegExp("^"+G(r).replace(/\\\*/gi,"(.*)")+"$","i").test(t))return f}}return d}(e))return"hash"==yt&&s.hash&&(e+=s.hash.split("?")[0]),e;p(b+"ignoring "+e)},Nt=function(t,e,n){var r=Bt(e);if(r&&$t!=r){$t=r,Dt.path=r,tt("v")&&(Dt.viewport_width=Math.max(q.clientWidth||0,l.innerWidth||0)||null,Dt.viewport_height=Math.max(q[H]||0,l.innerHeight||0)||null),tt("l")&&g[A]&&(Dt[A]=g[A]),N&&tt("sc")&&(Dt.screen_width=N.width,Dt.screen_height=N.height);var a,i=l.performance,o="navigation";try{a=i.getEntriesByType(o)[0].type}catch(ne){p(ne)}Vt=a?-1<["reload","back_forward"].indexOf(a):i&&i[o]&&-1<[1,2].indexOf(i[o].type);var c=Ct?Ct.split("/")[0]:h;It=Ct?-1<xt.indexOf(c)||c==v:d,Dt.unique=t||Vt?d:!It,n=ct(n,{type:m,path:Dt.path});var s=function(){E=f,function(t,e,n,r){t&&Ht(""+At.page_id,f),qt&&(At.page_id=nt());var a=ft+Bt();pt({id:At.page_id,type:m,referrer:!e||n?Ct:null,query:ut(e),metadata:S(r)}),Ut=Ct,Ct=a,V++}(t,t||Vt||!tt("r"),It,n)};if(E)s();else try{D&&rt(D.getHighEntropyValues)?D.getHighEntropyValues([T,U]).then(function(t){At.os_name=t[T],At.os_version=t[U],s()})["catch"](s):s()}catch(u){s()}}},zt=l.history,Ft=zt?zt.pushState:h,Wt=l.dispatchEvent,Gt="pushState";wt&&Ft&&Event&&Wt&&(zt.pushState=(te=zt[Xt=Gt],function(){var t,e=arguments,n=te.apply(this,e);return rt(Event)?t=new Event(Xt):(t=y.createEvent("Event")).initEvent(Xt,f,f),t.arguments=e,Wt(t),n}),M(Gt,function(){Nt(1)},d),M("popstate",function(){Nt(1)},d)),wt&&"hash"==yt&&"onhashchange"in l&&M("hashchange",function(){Nt(1)},d),wt?Nt():l.sa_pageview=function(t,e){Nt(0,t,e)};var Jt=["string","number"],Lt=function(t,e,n){!n&&rt(e)&&(n=e);var r=rt(t),a=rt(n)?n:function(){},i=typeof t;if(Jt.indexOf(i)<0&&!r)return F(bt,u+" can't be "+i),a();try{if(r){var o=t();if(Jt.indexOf(typeof o)<0)return F(bt,t+" returns no string: "+o),a();t=o}}catch(ne){return F(bt,ne),a()}t=(""+t).replace(/[^a-z0-9]+/gi,"_").replace(/(^_|_$)/g,"");var c={type:u,event:t},s=!Vt&&V<2;e=ct(e,c),t&&pt(Z(c,{id:nt(),query:ut(!s),referrer:(s||It)&&tt("r")?Ut:null,metadata:S(e)}),a)},Yt=function(t,e,n){Lt(t,e,n)};l[bt]||(l[bt]=Yt);var Zt=l[bt],Kt=Zt&&Zt.q?Zt.q:[];for(var Qt in l[bt]=Yt,Kt)W(Kt,Qt)&&(Array.isArray(Kt[Qt])?Lt.apply(null,Kt[Qt]):Lt(Kt[Qt]))}catch(re){n(re)}var Xt,te,ee}(window,{},"simpleanalyticscdn.com");
//# sourceMappingURL=latest.js.map</script><div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>On principle, I am against for loops in R, but it is better to use here instead of confusing you more.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>linguistics</category>
  <category>papers</category>
  <category>sound</category>
  <category>experiment</category>
  <guid>https://www.utkuturk.com/posts/mfa/</guid>
  <pubDate>Fri, 12 Jul 2024 00:00:00 GMT</pubDate>
  <media:content url="https://www.utkuturk.com/posts/mfa/mfa.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>automating experimental recording management with bash</title>
  <dc:creator>Utku Turk</dc:creator>
  <link>https://www.utkuturk.com/posts/server-recordings/</link>
  <description><![CDATA[ 




<p>I realized that most of my experimental time was being eaten up not by designing or running studies, but by the tedious task of downloading recordings from the server, unzipping them, converting formats, and filing them into the right participant folders. After a while, the frustration of repeating these steps by hand turned into procrastination and that procrastination produced some bash scripts to automate the whole process.</p>
<section id="step-1-download-recordings" class="level2">
<h2 class="anchored" data-anchor-id="step-1-download-recordings">Step 1: Download recordings</h2>
<p>First I grab all the zipped uploads from the server and drop them into a local directory.</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"></span>
<span id="cb1-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">remote_host</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"myserver@myserver.umd.edu"</span></span>
<span id="cb1-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">remote_path</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Users/myserver/Phillips/Utku/corner_same_verb/uploads/*.zip"</span></span>
<span id="cb1-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">local_path</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/Downloads/rec_feb23"</span></span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$local_path</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scp</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$remote_host</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$remote_path</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$local_path</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div></div>
</section>
<section id="step-2-unzip-and-convert-formats" class="level2">
<h2 class="anchored" data-anchor-id="step-2-unzip-and-convert-formats">Step 2: Unzip and convert formats</h2>
<p>Once the <code>.zip</code> files are on my machine, I unzip everything and convert the <code>.webm</code> files to <code>.wav</code> with ffmpeg. The originals go into a backup folder.</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$local_path</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unzip</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\*</span>.zip</span>
<span id="cb2-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>.webm<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ffmpeg</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$i</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${i</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>.<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.wav"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">done</span></span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> backup</span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mv</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\*</span>.zip ,/backup</span>
<span id="cb2-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\*</span>.webm</span></code></pre></div></div>
</section>
<section id="step-3-group-files-by-participant" class="level2">
<h2 class="anchored" data-anchor-id="step-3-group-files-by-participant">Step 3: Group files by participant</h2>
<p>My participant IDs are randomly generated 8-character strings, thus <code>{file:0:8}</code> and <code>^.{8}_</code>. I use the first eight characters of the filename as a prefix to create a directory per participant.</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> file <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb3-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-f</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$file</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb3-3">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">prefix</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${file</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb3-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$file</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=~</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">^.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb3-5">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">!</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-d</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$prefix</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb3-6">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$prefix</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb3-7">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb3-8">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mv</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$file</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$prefix</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/"</span></span>
<span id="cb3-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb3-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb3-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">done</span></span></code></pre></div></div>
</section>
<section id="step-4-sort-within-each-participant-folder" class="level2">
<h2 class="anchored" data-anchor-id="step-4-sort-within-each-participant-folder">Step 4: Sort within each participant folder</h2>
<p>Finally, within each participant’s folder, I move the recordings into two buckets: - <code>fam/</code> for habituation (familiarization) files (those with <em>fam</em>), - <code>misc/</code> for practice, intro, and test files.</p>
<p>I use <code>nullglob</code> to avoid errors if a folder doesn’t contain a certain file type.</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> prefix_dir <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>/<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb4-2">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">prefix_dir</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${prefix_dir</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>/<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> </span>
<span id="cb4-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-d</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$prefix_dir</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb4-4"></span>
<span id="cb4-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">!</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-d</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$prefix_dir</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/fam"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb4-6">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$prefix_dir</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/fam"</span></span>
<span id="cb4-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb4-8">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">setopt</span> nullglob</span>
<span id="cb4-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> fam_file <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$prefix_dir</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/"</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>_<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>fam_<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb4-10">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-f</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$fam_file</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb4-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$fam_file</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=~</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">.*</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_fam_</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">.*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb4-12">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mv</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$fam_file</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$prefix_dir</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/fam/"</span></span>
<span id="cb4-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb4-14">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb4-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">done</span></span>
<span id="cb4-16">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">unsetopt</span> nullglob</span>
<span id="cb4-17"></span>
<span id="cb4-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">!</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-d</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$prefix_dir</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/misc"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb4-19">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$prefix_dir</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/misc"</span></span>
<span id="cb4-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb4-21">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">setopt</span> nullglob</span>
<span id="cb4-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> misc_file <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$prefix_dir</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/"</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>_<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>practice_<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$prefix_dir</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/"</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>_<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>intro_<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$prefix_dir</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/"</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>_<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>test-<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb4-23">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-f</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$misc_file</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb4-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$misc_file</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=~</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">.*</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_practice_</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">.*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">||</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$misc_file</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=~</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">.*</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_intro_</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">.*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">||</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$misc_file</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=~</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">.*</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_test-</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">.*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb4-25">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">!</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$misc_file</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=~</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">.*</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_fam_</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">.*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span> </span>
<span id="cb4-26">              <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mv</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$misc_file</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$prefix_dir</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/misc/"</span></span>
<span id="cb4-27">          <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb4-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb4-29">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb4-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">done</span></span>
<span id="cb4-31">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">unsetopt</span> nullglob</span>
<span id="cb4-32">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb4-33"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">done</span></span></code></pre></div></div>
<p>What started as procrastination ended up saving me hours of repetitive work. Probably, it is not a good code, but it turns file management into a background task and leaves more time to me for the actual science. If you have any comments how to make the code better, please reach out!</p>


</section>

<script data-collect-dnt="true" async="" src="https://scripts.simpleanalyticscdn.com/latest.js"></script> ]]></description>
  <category>technical</category>
  <category>code</category>
  <guid>https://www.utkuturk.com/posts/server-recordings/</guid>
  <pubDate>Thu, 23 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://www.utkuturk.com/posts/server-recordings/bash.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>agreement attraction in turkish</title>
  <dc:creator>Utku Turk</dc:creator>
  <link>https://www.utkuturk.com/posts/ma-thesis/</link>
  <description><![CDATA[ 




<p>The term agreement attraction is used to describe either increased acceptability of ungrammatical sentences or reduced difficulty in reading ungrammatical sentences. This was made possible by an illusionary element which matches with the features of the verb, thus attracting the probe of the agreement from the head noun to itself. <br> <br> Consider the following sentence: “*The key to the cabinets are rusty.” Even though it is ungrammatical, people systematically accepted these sentences more often than the ones with the word “attractor.” They also spend less time when there is a plural nominal like “cabinets” rather than the word “cabinet.” <br> <br> This thesis tries to explore how the attraction phenomenon interacts with issues like case syncretism, form heuristics, response bias, and register, all of which are rarely investigated in the literature. This thesis also provides an extensive, but not exhaustive, picture of attraction effects in Turkish, an understudied language in psycholinguistics.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Abstract">
<div class="callout-header d-flex align-content-center collapsed" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Note</span>Abstract
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>In this thesis, I investigate the existing agreement attraction effects in Turkish and how these effects interact with various phenomenon such as (i) case syncretism and local ambiguity, (ii) form heuristics, (iii) response bias, and (iv) honorific readings. Previous studies have shown that speakers occasionally find ungrammatical sentences violating number agreement acceptable when there is another noun sharing same number with the verb, in other words exhibited agreement attraction. Lago et al.&nbsp;(2019) found that genitive-possessive structures were able to induce agreement attraction effects within native Turkish speakers in a speeded acceptability experiment. However, due to the nature of the Turkish and acceptability studies, there are multiple alternative explanations for the existing effects. This thesis aims to weed out possible confounds and clarify the effects by conducting four speeded acceptability judgment experiments. We showed (i) that case-ambiguity on the head noun does not play a role in Turkish agreement attraction (Experiment 1, N = 118), (ii) that participants do not use form-driven-processing-strategies to answer judgment questions (Experiments 2A, N = 80, and 2B, N = 95), (iii) that response bias induced ungrammaticality illusion and only decreased the magnitude of grammaticality illusion (Experiment 3, N = 114), and (iv) that a possible honorific reading does not license superfluous plural marking at the verb (Experiment 4, N = 174). Together, our results challenge cue-based retrieval accounts of agreement attraction and can be accommodated by accounts that assume attraction occurs due to erroneous encodings.</p>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="Defense Slides">
<div class="callout-header d-flex align-content-center collapsed" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Tip</span>Defense Slides
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p><embed src="slides.pdf" style="width:100.0%" height="400"></p>
</div>
</div>
</div>
<div class="callout callout-style-default callout-important callout-titled" title="Thesis">
<div class="callout-header d-flex align-content-center collapsed" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Important</span>Thesis
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p><a href="http://seyhan.library.boun.edu.tr/record=b2776878~S5"><strong>Bogazici Page</strong></a> | <a href="thesis.pdf"><strong>Local PDF</strong></a> | <a href="https://www.overleaf.com/read/vdstcpwwvdpp"><strong>Overleaf</strong></a></p>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled" title="Plots from defense &amp; some more">
<div class="callout-header d-flex align-content-center collapsed" data-bs-toggle="collapse" data-bs-target=".callout-18-contents" aria-controls="callout-18" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Note</span>Plots from defense &amp; some more
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-18" class="callout-18-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="callout callout-style-simple callout-none no-icon callout-titled" title="Exp1 Averages">
<div class="callout-header d-flex align-content-center collapsed" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">None</span>Exp1 Averages
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p><img src="https://www.utkuturk.com/posts/ma-thesis/exp1A.png" class="img-fluid" style="width:85.0%"></p>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-none no-icon callout-titled" title="Exp1 Models">
<div class="callout-header d-flex align-content-center collapsed" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">None</span>Exp1 Models
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Bayesian Model fitted to all experimental items<br>
<img src="https://www.utkuturk.com/posts/ma-thesis/exp1M1.png" class="img-fluid" style="width:85.0%"></p>
<p>Bayesian Model fitted to <strong>only ungrammatical</strong> experimental items<br>
<img src="https://www.utkuturk.com/posts/ma-thesis/exp1M2.png" class="img-fluid" style="width:85.0%"></p>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-none no-icon callout-titled" title="Exp2A Averages">
<div class="callout-header d-flex align-content-center collapsed" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">None</span>Exp2A Averages
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p><img src="https://www.utkuturk.com/posts/ma-thesis/exp2AA.png" class="img-fluid" style="width:85.0%"></p>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-none no-icon callout-titled" title="Exp2A Models">
<div class="callout-header d-flex align-content-center collapsed" data-bs-toggle="collapse" data-bs-target=".callout-7-contents" aria-controls="callout-7" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">None</span>Exp2A Models
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-7" class="callout-7-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p><img src="https://www.utkuturk.com/posts/ma-thesis/exp2AM2.png" class="img-fluid" style="width:85.0%"></p>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-none no-icon callout-titled" title="Exp2B Averages">
<div class="callout-header d-flex align-content-center collapsed" data-bs-toggle="collapse" data-bs-target=".callout-8-contents" aria-controls="callout-8" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">None</span>Exp2B Averages
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-8" class="callout-8-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p><img src="https://www.utkuturk.com/posts/ma-thesis/exp2BA.png" class="img-fluid" style="width:85.0%"></p>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-none no-icon callout-titled" title="Exp2B Models">
<div class="callout-header d-flex align-content-center collapsed" data-bs-toggle="collapse" data-bs-target=".callout-9-contents" aria-controls="callout-9" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">None</span>Exp2B Models
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-9" class="callout-9-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Bayesian Model fitted to all experimental items<br>
<img src="https://www.utkuturk.com/posts/ma-thesis/exp2BM1.png" class="img-fluid" style="width:85.0%"></p>
<p>Bayesian Model fitted to <strong>only experimental items with RC attractors</strong><br>
<img src="https://www.utkuturk.com/posts/ma-thesis/exp2BM2.png" class="img-fluid" style="width:85.0%"></p>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-none no-icon callout-titled" title="Exp3 Averages">
<div class="callout-header d-flex align-content-center collapsed" data-bs-toggle="collapse" data-bs-target=".callout-10-contents" aria-controls="callout-10" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">None</span>Exp3 Averages
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-10" class="callout-10-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p><img src="https://www.utkuturk.com/posts/ma-thesis/exp3A.png" class="img-fluid" style="width:85.0%"></p>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-none no-icon callout-titled" title="Hammerly et al. (2019) Averages">
<div class="callout-header d-flex align-content-center collapsed" data-bs-toggle="collapse" data-bs-target=".callout-11-contents" aria-controls="callout-11" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">None</span>Hammerly et al.&nbsp;(2019) Averages
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-11" class="callout-11-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p><img src="https://www.utkuturk.com/posts/ma-thesis/hamavgs.png" class="img-fluid" style="width:85.0%"></p>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-none no-icon callout-titled" title="Hammerly et al. (2019) Bias Informed Averages">
<div class="callout-header d-flex align-content-center collapsed" data-bs-toggle="collapse" data-bs-target=".callout-12-contents" aria-controls="callout-12" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">None</span>Hammerly et al.&nbsp;(2019) Bias Informed Averages
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-12" class="callout-12-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p><img src="https://www.utkuturk.com/posts/ma-thesis/hamavgs_bias_informed.png" class="img-fluid" style="width:85.0%"></p>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-none no-icon callout-titled" title="Hammerly et al. (2019) Bias Informed Model">
<div class="callout-header d-flex align-content-center collapsed" data-bs-toggle="collapse" data-bs-target=".callout-13-contents" aria-controls="callout-13" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">None</span>Hammerly et al.&nbsp;(2019) Bias Informed Model
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-13" class="callout-13-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p><img src="https://www.utkuturk.com/posts/ma-thesis/hM2.png" class="img-fluid" style="width:85.0%"></p>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-none no-icon callout-titled" title="Exp3 Bias-Related">
<div class="callout-header d-flex align-content-center collapsed" data-bs-toggle="collapse" data-bs-target=".callout-14-contents" aria-controls="callout-14" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">None</span>Exp3 Bias-Related
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-14" class="callout-14-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Participants Bias in our Experiment 3 using fillers and Bayes Factor for parametric t-test<br>
<img src="https://www.utkuturk.com/posts/ma-thesis/exp3_bias_our.png" class="img-fluid" style="width:85.0%"></p>
<p>Participants Bias in Hammerly et al.&nbsp;(2019) using fillers and experimental items as well as Bayes Factor for parametric t-tests<br>
<img src="https://www.utkuturk.com/posts/ma-thesis/hammer_bias.png" class="img-fluid" style="width:85.0%"></p>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-none no-icon callout-titled" title="Exp3 Models">
<div class="callout-header d-flex align-content-center collapsed" data-bs-toggle="collapse" data-bs-target=".callout-15-contents" aria-controls="callout-15" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">None</span>Exp3 Models
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-15" class="callout-15-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Bayesian Model fitted to <strong>only ungrammatical</strong> experimental items<br>
<img src="https://www.utkuturk.com/posts/ma-thesis/exp3M1.png" class="img-fluid" style="width:85.0%"></p>
<p>Bayesian Model fitted to <strong>only grammatical</strong> experimental items<br>
<img src="https://www.utkuturk.com/posts/ma-thesis/exp3M2.png" class="img-fluid" style="width:85.0%"></p>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-none no-icon callout-titled" title="Exp4 Averages">
<div class="callout-header d-flex align-content-center collapsed" data-bs-toggle="collapse" data-bs-target=".callout-16-contents" aria-controls="callout-16" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">None</span>Exp4 Averages
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-16" class="callout-16-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p><img src="https://www.utkuturk.com/posts/ma-thesis/exp4.jpg" class="img-fluid" style="width:85.0%"></p>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-none no-icon callout-titled" title="Exp4 Models">
<div class="callout-header d-flex align-content-center collapsed" data-bs-toggle="collapse" data-bs-target=".callout-17-contents" aria-controls="callout-17" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">None</span>Exp4 Models
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-17" class="callout-17-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Bayesian Model fitted to all experimental items<br>
<img src="https://www.utkuturk.com/posts/ma-thesis/exp4M1.png" class="img-fluid" style="width:85.0%"></p>
<p>Bayesian Model fitted to <strong>only informal</strong> experimental items<br>
<img src="https://www.utkuturk.com/posts/ma-thesis/exp4M2.png" class="img-fluid" style="width:85.0%"></p>
</div>
</div>
</div>
</div>
</div>
</div>
<section id="supplementary-links" class="level4">
<h4 class="anchored" data-anchor-id="supplementary-links">Supplementary links</h4>
<ul>
<li><a href="https://github.com/utkuturk/ma-thesis/raw/main/ma_thesis_aug10.pdf">Download Full Thesis</a></li>
<li><a href="https://github.com/utkuturk/ma-thesis">Github Repo</a></li>
<li><a href="https://github.com/utkuturk/ma-thesis/tree/main/scripts">All Code (Grouped according to the chapters)</a></li>
<li><a href="https://github.com/utkuturk/ma-thesis/tree/main/resources/raw">Experiment Raw Data</a></li>
<li><a href="https://www.ingentaconnect.com/content/jbp/lab/2019/00000009/00000003/art00003?crawler=true&amp;mimetype=application/pdf&amp;casa_token=nL8v53m5GmsAAAAA:qI0dAbPjR7h42vijbp23x8myaJ1izLo1xWmPAtpGHlp5s2Uys7DUgJzmYffdbnknagUYS9mJhEmLQSRANIU">Lago et al.’s (2019) work</a></li>
<li><a href="https://www.sciencedirect.com/science/article/pii/S0010028518303049?casa_token=XGe6pUW_ws0AAAAA:OzPmvvHWS7vN7_BWawGfdSeOy1fPoHiDKiKk667oAqULZ16tU-ZXVj97pc9IriqC6GJT0ru29K4">Hammerly et al.’s (2019) work</a></li>
<li><a href="https://github.com/utkuturk/ma-thesis/tree/main/defense-plots">Code for nicer plots from the defense</a></li>
<li><a href="https://farm.pcibex.net/p/HIekVL/">Experiment 1</a></li>
<li><a href="https://farm.pcibex.net/p/gpVrBy/">Experiment 2A</a></li>
<li><a href="https://farm.pcibex.net/p/cVZVuY/">Experiment 2B</a></li>
<li><a href="https://farm.pcibex.net/p/yUyVON/">Experiment 3</a></li>
<li><a href="https://farm.pcibex.net/p/xFMjLC/">Experiment 4</a></li>
</ul>


</section>

<script data-collect-dnt="true" async="" src="https://scripts.simpleanalyticscdn.com/latest.js"></script> ]]></description>
  <category>linguistics</category>
  <category>dissertation</category>
  <category>agreement attraction</category>
  <guid>https://www.utkuturk.com/posts/ma-thesis/</guid>
  <pubDate>Sat, 20 Aug 2022 00:00:00 GMT</pubDate>
  <media:content url="https://www.utkuturk.com/posts/ma-thesis/exp3_bias_our.png" medium="image" type="image/png" height="90" width="144"/>
</item>
<item>
  <title>is /j/ really a sonorant in turkish? i guess not.</title>
  <dc:creator>Utku Turk</dc:creator>
  <link>https://www.utkuturk.com/posts/j-glide/</link>
  <description><![CDATA[ 




<p>This work started as a term paper for our master’s phonology class with <a href="https://www.linkedin.com/in/semra-özdemir-6567b6155/">Semra Ozdemir</a>. She was interested in the properties of sonorants and I was interested in the phonetics of them. We saw that in many environments Turkish glide /j/ acts differently than other sonorants. The fact that /j/ was the only phonemic glide in Turkish was already interesting by itself. We asked the following question: <strong>Is it really a glide?</strong></p>
<p>We looked at certain phonological behaviors of the /j/: (i) /h/ deletion prior to sonorants, (ii) consonant-clusters in coda, and (iii) [e]-lowering prior to sonorants. We also conducted a phonetics experiment where we asked people to read sentences that contains sonorants in word-final, word-initial, and intervocalic positions following the sound [e]. Our results from this experiment can be seen in the figure below.</p>
<center>
<img src="https://www.utkuturk.com/posts/j-glide/glide_fig.png" alt="<i>Figure 1.</i> F1 and F2 values of individual utterances of the mid-front vowel e.We grouped these instances into two: following /j/ or following a non-/j/ sound." width="85%">
<p class="caption">
<i>Figure 1.</i> F1 and F2 values of individual utterances of the mid-front vowel e.We grouped these instances into two: following /j/ or following a non-/j/ sound.
</p>
</center>
<p>We saw that /j/ behaves nothing like a sonorant. When the sound /j/ follows the mid-front vowel [e], it did not lower the vowel. However, every other sonorant (non-/j/) substantially lowered the vowel. Even though, it is clear that /j/ does not act like a sonorant, we were indecisive whether it were unspecified with respect to its sonoracy or it was just a fricative.</p>
<p>Later on, <a href="https://linguistics.boun.edu.tr/stefano-canalis">Stefano Canalis</a> and <a href="https://www.linkedin.com/in/ümit-can-tunçer-b97479b2/">Umit Tuncer</a> also joined us in this project. With their help, we decided that /j/ is a phonemically fricative in Turkish, but may show sonorant-like behavior in certain environments. With them, we looked at the phonemic behavior of /j/ in more environments. We also investigated the feature symmetry in Turkish.</p>
<p>We saw that other phonetic sonorants in Turkish were also phonemically fricative and /j/ and other sonorants become sonorant-like in the very same environments.</p>



<script data-collect-dnt="true" async="" src="https://scripts.simpleanalyticscdn.com/latest.js"></script> ]]></description>
  <category>linguistics</category>
  <category>papers</category>
  <category>sound</category>
  <guid>https://www.utkuturk.com/posts/j-glide/</guid>
  <pubDate>Tue, 10 May 2022 00:00:00 GMT</pubDate>
  <media:content url="https://www.utkuturk.com/posts/j-glide/glide_fig.png" medium="image" type="image/png" height="99" width="144"/>
</item>
<item>
  <title>Can ‘As if’ clauses be degree comparisons?</title>
  <dc:creator>Utku Turk</dc:creator>
  <link>https://www.utkuturk.com/posts/as-if/</link>
  <description><![CDATA[ 




<p><img src="https://www.utkuturk.com/posts/as-if/dancing.jpg" class="preview-image img-fluid"></p>
<p>After reading <a href="https://www.jbledin.com/papers">Justin Bledin’s</a> work on English <em>as ifs</em>, we realized that Turkish counterparts of <em>as ifs</em> behave differently. It seemed that instead of a simple comparison of events, Turkish <em>as ifs</em> seems to be susceptible to <strong>gradability</strong> and <strong>degree</strong>.</p>
<p>To account for Turkish facts, we proposed that a novel analysis of these sentences. While previous accounts were based on event similarity, our hypothesis is based on comparing degrees of gradable elements involved in the event.</p>
<p>Consider this sentence: Pedro was dancing as if he was possessed by a demon. And, let’s take a look at the interpretations in (1) and (2). (1) is the simplified version of previous accounts. The key word for those analyses is the resemblance. On the other hand, (2) is our account in a simplified manner. Instead of using resemblance, we proposed an equatative approach. Our analysis compares two degrees of adverbials.</p>
<div class="cell">
<div class="cell-output-display">
<ol class="example" type="1">
<li>Pedro’s dancing in the actual world resembles his dancing in other possible worlds where he is possessed by a demon.</li>
</ol>
</div>
<div class="cell-output-display">
<ol start="2" class="example" type="1">
<li>The level of craziness of Pedro’s dancing in the actual world is ≥ the level of craziness of his dancing in other possible worlds where he is possessed by a demon.</li>
</ol>
</div>
</div>
<p>Here’s the facts that support our analysis:</p>
<p><em>Unlike English and German, Turkish does not have an overt conditional marker in as ifs constructions.</em></p>
<div class="cell">
<div class="cell-output-display">
<ol start="3" class="example" type="1">
<li>Pedro was dancing he was possessed by a demon.</li>
</ol>
</div>
<div class="cell-output-display">
<ol start="4" class="example" type="1">
<li><style>.gloss__line--original {font-style:normal;font-weight:normal} .gloss__word .gloss__line:first-child {font-style:normal;font-weight:normal} .gloss__word .gloss__line--2 {font-style:normal;font-weight:normal} .gloss__word .gloss__line--3 {font-style:normal;font-weight:normal} .gloss__line--free {font-style:normal;font-weight:normal}</style>
<div data-gloss="">
<p class="gloss__line--original">
&nbsp;
</p>
<p>
Pedro içine cin kaç-mışcasına {dans ed-iyor-du}
</p>
<p>
Pedro inside jhin escape-HCM dance-IMPF-PST.3SG
</p>
<p class="gloss__line--free">
“Pedro was dancing as if he was possessed by a demon.”
</p>
</div>
<script>document.addEventListener('DOMContentLoaded', function() {Leipzig({lastLineFree: false}).gloss();});</script></li>
</ol>
</div>
</div>
<p><em>It is frequently used with an adverbial in a matrix sentence with a verbal predicate.</em></p>
<div class="cell">
<div class="cell-output-display">
<ol start="5" class="example" type="1">
<li><style>.gloss__line--original {font-style:normal;font-weight:normal} .gloss__word .gloss__line:first-child {font-style:normal;font-weight:normal} .gloss__word .gloss__line--2 {font-style:normal;font-weight:normal} .gloss__word .gloss__line--3 {font-style:normal;font-weight:normal} .gloss__line--free {font-style:normal;font-weight:normal}</style>
<div data-gloss="">
<p class="gloss__line--original">
&nbsp;
</p>
<p>
Pedro içine cin kaç-mışcasına çılgınca {dans ed-iyor-du}
</p>
<p>
Pedro inside jhin escape-HCM <strong>crazily</strong> dance-IMPF-PST.3SG
</p>
<p class="gloss__line--free">
“Pedro was dancing as if he was possessed by a demon.”
</p>
</div></li>
</ol>
</div>
</div>
<p><em>Even when there is no overt adverbial, the use of -mışcasına phrase necessitates an adverbial reading to be accessed from the context. When we use -mışcasına phrase in a sentence where there is no possible adverbial is available in the context, the sentence become infelicitous.</em></p>
<div class="cell">
<div class="cell-output-display">
<ol start="6" class="example" type="1">
<li><style>.gloss__line--original {font-style:normal;font-weight:normal} .gloss__word .gloss__line:first-child {font-style:normal;font-weight:normal} .gloss__word .gloss__line--2 {font-style:normal;font-weight:normal} .gloss__word .gloss__line--3 {font-style:normal;font-weight:normal} .gloss__line--free {font-style:normal;font-weight:normal}</style>
<div data-gloss="">
<p class="gloss__line--original">
*
</p>
<p>
Yarın meteor yağ-acak-mışcasına dans ed-iyor-sun.
</p>
<p>
tomorrow meteor rain-FUT-HCM dance-IMPF-2SG
</p>
<p class="gloss__line--free">
“You are dancing [???] as if there will be a meteor shower tomorrow.”
</p>
</div></li>
</ol>
</div>
</div>
<p><em>More importantly, these adverbs are always <strong>gradable</strong> adverbials. Similarly, when the matrix predicate is non-verbal, it has to be a <strong>gradable</strong> adjective.</em></p>
<div class="cell">
<div class="cell-output-display">
<ol start="7" class="example" type="1">
<li><style>.gloss__line--original {font-style:normal;font-weight:normal} .gloss__word .gloss__line:first-child {font-style:normal;font-weight:normal} .gloss__word .gloss__line--2 {font-style:normal;font-weight:normal} .gloss__word .gloss__line--3 {font-style:normal;font-weight:normal} .gloss__line--free {font-style:normal;font-weight:normal}</style>
<div data-gloss="">
<p class="gloss__line--original">
&nbsp;
</p>
<p>
Helin pandemi bit-mişcesine mutlu.
</p>
<p>
Helin pandemic end-HCM happy.3SG
</p>
<p class="gloss__line--free">
“Helin is happy as if the pandemic is over.”
</p>
</div></li>
</ol>
</div>
<div class="cell-output-display">
<ol start="8" class="example" type="1">
<li><style>.gloss__line--original {font-style:normal;font-weight:normal} .gloss__word .gloss__line:first-child {font-style:normal;font-weight:normal} .gloss__word .gloss__line--2 {font-style:normal;font-weight:normal} .gloss__word .gloss__line--3 {font-style:normal;font-weight:normal} .gloss__line--free {font-style:normal;font-weight:normal}</style>
<div data-gloss="">
<p class="gloss__line--original">
*
</p>
<p>
Cevab-ı soru-yu duy-ma-mışcasına yanlış-tı .
</p>
<p>
answer-POSS.3SG question-ACC hear-NEG-HCM wrong-PST.3SG
</p>
<p class="gloss__line--free">
“Intended: His answer was wrong as if he did not hear the question.”
</p>
</div></li>
</ol>
</div>
</div>
<p><em>Lastly, when there is an already established degree-related operation, we cannot use -mışcasına phrases. This is similar to the cases where we cannot use two degree operators most and more at the same time.</em></p>
<div class="cell">
<div class="cell-output-display">
<ol start="9" class="example" type="1">
<li><style>.gloss__line--original {font-style:normal;font-weight:normal} .gloss__word .gloss__line:first-child {font-style:normal;font-weight:normal} .gloss__word .gloss__line--2 {font-style:normal;font-weight:normal} .gloss__word .gloss__line--3 {font-style:normal;font-weight:normal} .gloss__line--free {font-style:normal;font-weight:normal}</style>
<div data-gloss="">
<p class="gloss__line--original">
&nbsp;
</p>
<p>
Mecidiyeköy cehennem-mışcesine kalabalık bir ilçe-miz-dir.
</p>
<p>
Mecidiyeköy hell-HCM crowded a district-POSS.1PL-AOR
</p>
<p class="gloss__line--free">
“Mecidiyeköy is a crowded district as if it was hell.”
</p>
</div></li>
</ol>
</div>
<div class="cell-output-display">
<ol start="10" class="example" type="1">
<li><style>.gloss__line--original {font-style:normal;font-weight:normal} .gloss__word .gloss__line:first-child {font-style:normal;font-weight:normal} .gloss__word .gloss__line--2 {font-style:normal;font-weight:normal} .gloss__word .gloss__line--3 {font-style:normal;font-weight:normal} .gloss__line--free {font-style:normal;font-weight:normal}</style>
<div data-gloss="">
<p class="gloss__line--original">
*
</p>
<p>
Mecidiyeköy cehennem-mışcesine en kalabalık ilçe-miz-dir.
</p>
<p>
Mecidiyeköy hell-HCM most crowded district-POSS.1PL-AOR
</p>
<p class="gloss__line--free">
“Intended: Mecidiyeköy is the most crowded district as if it was hell.”
</p>
</div></li>
</ol>
</div>
</div>
<p>The distribution of -mışcasına clauses shows that Turkish “as if” does not simply signal resemblance between two events, but rather compares the degree of gradable properties across possible worlds. This degree-based perspective explains why such clauses pattern with adverbials and adjectives that admit gradability, and why they fail in contexts that already contain competing degree operators.</p>
<style>
      .preview-image {
        display: block;
        margin: 1.2rem auto;
        max-width: 55%;      /* adjust size */
        border-radius: 10px; /* optional rounded corners */
        box-shadow: 0 4px 14px rgba(0,0,0,.08);
      }
</style>



<script data-collect-dnt="true" async="" src="https://scripts.simpleanalyticscdn.com/latest.js"></script> ]]></description>
  <category>linguistics</category>
  <category>papers</category>
  <category>meaning</category>
  <guid>https://www.utkuturk.com/posts/as-if/</guid>
  <pubDate>Tue, 10 May 2022 00:00:00 GMT</pubDate>
  <media:content url="https://www.utkuturk.com/posts/as-if/dancing.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>How to include R expressions in (quarto) YAML</title>
  <dc:creator>Utku Turk</dc:creator>
  <link>https://www.utkuturk.com/posts/yaml-rnotebook/</link>
  <description><![CDATA[ 




<p>When writing R Markdown or Quarto files, I’ve always disliked cluttering them with long file paths, fixed parameters, or small snippets of code. Many of these values are constants or things I don’t plan to change often, sometimes not even across projects. So I started looking for a way to move such information into a separate YAML file and refer to it from within Quarto. You could of course do this with a regular R script and source(), but I found that YAML makes these kinds of project-wide parameters easier to organize and read.</p>
<section id="embedding-r-in-yaml" class="level2">
<h2 class="anchored" data-anchor-id="embedding-r-in-yaml">Embedding R in YAML</h2>
<p>While digging around, I came across <a href="https://stackoverflow.com/questions/64454623/r-read-yaml-reads-a-vector-as-parameter">this helpful StackOverflow post</a>, which pointed out that YAML can evaluate R expressions directly if marked with !expr. This means your config file can contain values that are not just static strings, but dynamically computed.</p>
<p>For example, my <code>_paper.yaml</code> file looks like this:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">experiments</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb1-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">first</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb1-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> !expr 'paste0("C:/Users/", Sys.info()[6], "/OneDrive/Science/experiments/first")'</span></span>
<span id="cb1-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nsubject</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> !expr 'nrow(read.csv(file.path(paste0("C:/Users/", Sys.info()[6], "/OneDrive/Science/experiments/first"), "results.csv")))'</span></span>
<span id="cb1-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">second</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> !expr 'paste0("C:/Users/", Sys.info()[6], "/OneDrive/Science/experiments/second")'</span></span>
<span id="cb1-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">third</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ...</span></span></code></pre></div></div>
</section>
<section id="reading-it-in-r" class="level2">
<h2 class="anchored" data-anchor-id="reading-it-in-r">Reading it in R</h2>
<p>To load the config file, you just need to enable expression evaluation when calling <code>yaml::read_yaml()</code>:</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">config <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> yaml<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_yaml</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_paper.yaml'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">eval.expr =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div></div>
</div>
<p>Now, config behaves like a nested list, and you can access parameters directly. For example:</p>
<div class="cell">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">config<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>experiments<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>first</span>
<span id="cb3-2">config<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>experiments<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>first<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>nsubject</span></code></pre></div></div>
</div>
<p>This makes it easy to centralize all project-level constants and keep your Quarto documents cleaner.</p>
</section>
<section id="why-this-helps" class="level2">
<h2 class="anchored" data-anchor-id="why-this-helps">Why This Helps</h2>
<ul>
<li>Cleaner documents: no repeated paths or magic numbers in your <code>.qmd</code> files.</li>
<li>Reusability: the same YAML file can be shared across multiple projects.</li>
<li>Flexibility: values can be static (like participant counts) or computed on the fly (like paths that depend on the username).</li>
</ul>
<p>It might feel a little fragile, since I am evaluating R code hidden in a config file, but it’s been reliable and I am finding it quite useful. For instance, I sometimes even compute the number of participants automatically from an Ibex CSV and store it in the YAML—then refer to it in my Quarto text.</p>


</section>

<script data-collect-dnt="true" async="" src="https://scripts.simpleanalyticscdn.com/latest.js"></script> ]]></description>
  <category>technical</category>
  <category>code</category>
  <guid>https://www.utkuturk.com/posts/yaml-rnotebook/</guid>
  <pubDate>Thu, 23 Jan 2020 00:00:00 GMT</pubDate>
  <media:content url="https://www.utkuturk.com/posts/yaml-rnotebook/yaml.png" medium="image" type="image/png" height="144" width="144"/>
</item>
</channel>
</rss>
